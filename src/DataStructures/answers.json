[
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4953fe58e11c319e20ec/59b10de80cf2a7f72cf788d7",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            true,
            true,
            true,
            true
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4953fe58e11c319e20ec/5b0f9905015de916f83f32b7",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            false,
            false,
            true,
            true
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4953fe58e11c319e20ec/5b0f9d6d015de916f83f38b3",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            true,
            false,
            true,
            true,
            true
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4953fe58e11c319e20ec/5b0fbb44015de916f83f4826",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            false,
            true,
            true,
            true
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4953fe58e11c319e20ec/5b0fc30c015de916f83f50ad",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            true,
            false,
            false,
            true,
            true,
            true,
            true
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4953fe58e11c319e20ec/5b0fc754015de916f83f5454",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            false,
            false,
            false,
            true
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4953fe58e11c319e20ec/5b0fd4ff015de916f83f5fd7",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            true,
            false,
            true
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4953fe58e11c319e20ec/5b0fda78015de916f83f61bf",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            true,
            true,
            true,
            false
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4953fe58e11c319e20ec/5b0fe19c015de916f83f631b",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            false,
            true
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4953fe58e11c319e20ec/5b0fea59015de916f83f64a1",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            false,
            true
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4953fe58e11c319e20ec/5b10116f015de916f83f6da1",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            true,
            true,
            true,
            false
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4953fe58e11c319e20ec/5b101991015de916f83f6f9b",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            true,
            false,
            true,
            true
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4953fe58e11c319e20ec/5b102097015de916f83f71e3",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            true,
            false
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4953fe58e11c319e20ec/5b10b423015de916f83f7bc6",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            true,
            true
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4953fe58e11c319e20ec/5b10b718015de916f83f7c1f",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            false,
            false,
            true,
            true
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4953fe58e11c319e20ec/5b10d186015de916f83f91c1",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            true,
            false
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4953fe58e11c319e20ec/5b10d863015de916f83f9966",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            true,
            true,
            false,
            false
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4953fe58e11c319e20ec/5b10ed21015de916f83fb317",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            true,
            true,
            false
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4953fe58e11c319e20ec/5b1119c2015de916f83fcc58",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            true,
            true
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4968fe58e11c319e20ff/585e3e890cf2f069ef156bd8",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include <stdio.h>\nvoid main() {\nint arr[10];\narr[0] = 10;\narr[1] = 20;\narr[2] = 100;\narr[3] = 200;\nprintf(\"The value in arr[0] : %d\\n\", arr[0] ); // Print the 0th element of arr\nprintf(\"The value in arr[1] : %d\\n\", arr[1] ); // Print the 1st element of arr\nprintf(\"The value in arr[2] : %d\\n\", arr[2] ); // Print the 2nd element of arr\nprintf(\"The value in arr[3] : %d\\n\", arr[3] ); // Print the 3rd element of arr\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037c5\">#include</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>arr[<span class=\"\u037cd\">10</span>];</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>arr[<span class=\"\u037cd\">0</span>]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">10</span>;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>arr[<span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">20</span>;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>arr[<span class=\"\u037cd\">2</span>]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">100</span>;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>arr[<span class=\"\u037cd\">3</span>]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">200</span>;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">arr[0]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,</span><span class=\"cm-highlightSpace\"> </span>arr[<span class=\"\u037cd\">0</span>]<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Print</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">0th</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">arr</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">arr[1]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,</span><span class=\"cm-highlightSpace\"> </span>arr[<span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Print</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">1st</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">arr</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">arr[2]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,</span><span class=\"cm-highlightSpace\"> </span>arr[<span class=\"\u037cd\">2</span>]<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Print</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">2nd</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">arr</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">arr[3]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,</span><span class=\"cm-highlightSpace\"> </span>arr[<span class=\"\u037cd\">3</span>]<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Print</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">3rd</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">arr</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">}</span></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4968fe58e11c319e20ff/585e3ea10cf2f069ef156be7",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include <stdio.h>\nvoid main() {\nint a[10], i, n;\nprintf(\"Enter how many values you want to read : \");\nscanf(\"%d\",&n ); // Complete the code\nfor (i=0 ; i<n ; i++ ) { // Complete the code\nprintf(\"Enter the value of a[%d] : \", i);\nscanf(\"%d\",&a[i]); // Complete the code\n}\nprintf(\"The array elements are : \");\nfor (i=0 ; i<n ; i++ ) { // Complete the code\nprintf(\" %d \",a[i] ); // Complete the code\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037c5\">#include</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[<span class=\"\u037cd\">10</span>],<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>n;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">how</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">many</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">values</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">you</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">want</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">read</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,</span>&amp;n<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(i</span>=<span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">;<span class=\"cm-highlightSpace\"> </span>i</span>&lt;n<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">;<span class=\"cm-highlightSpace\"> </span>i</span>++<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"bg-error bg-opacity-40\">printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>i);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,</span>&amp;a[i]<span class=\"bg-error bg-opacity-40\">);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">are</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(i</span>=<span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">;<span class=\"cm-highlightSpace\"> </span>i</span>&lt;n<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">;<span class=\"cm-highlightSpace\"> </span>i</span>++<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,</span>a[i]<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">}</span></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4968fe58e11c319e20ff/585e3f970cf2f069ef156c46",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include <stdio.h>\nvoid main() {\nint a[5][5], i, j, rows, cols;\nprintf(\"Enter row and column sizes : \");\nscanf(\"%d %d\", &rows,&cols ); //Correct the code\nfor (i=0 ; i<rows ; i++ ) { //Correct the code\nfor (j=0 ; j <cols ; j++ ) { //Correct the code\nprintf(\"Enter the value of a[%d][%d] : \", i, j);\nscanf(\"%d\",&a[i][j] ); //Correct the code\n}\n}\nprintf(\"The given matrix is\\n\");\nfor (i=0 ; i<rows ; i++ ) { //Correct the code\nfor (j=0 ; j<cols ; j++ ) { //Correct the code\nprintf(\"%d \",a[i][j] ); //Correct the code\n}\nprintf(\"\\n\");\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037c5\">#include</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[<span class=\"\u037cd\">5</span>][<span class=\"\u037cd\">5</span>],<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>j,<span class=\"cm-highlightSpace\"> </span>rows,<span class=\"cm-highlightSpace\"> </span>cols;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">row</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">and</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">column</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sizes</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d\"</span>,</span><span class=\"cm-highlightSpace\"> </span>&amp;rows,&amp;cols<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//Correct</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(i</span>=<span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">;<span class=\"cm-highlightSpace\"> </span>i</span>&lt;rows<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">;<span class=\"cm-highlightSpace\"> </span>i</span>++<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//Correct</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(j</span>=<span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">;<span class=\"cm-highlightSpace\"> </span>j</span><span class=\"cm-highlightSpace\"> </span>&lt;cols<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">;<span class=\"cm-highlightSpace\"> </span>j</span>++<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//Correct</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d][%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>j);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,</span>&amp;a[i][j]<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//Correct</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">given</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">matrix</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">is</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(i</span>=<span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">;<span class=\"cm-highlightSpace\"> </span>i</span>&lt;rows<span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">)<span class=\"cm-highlightSpace\"> </span>{</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//Correct</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(j=<span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">;<span class=\"cm-highlightSpace\"> </span>j</span>&lt;cols<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">;<span class=\"cm-highlightSpace\"> </span>j</span>++<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//Correct</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,</span>a[i][j]<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//Correct</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">}</span></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4995fe58e11c319e214a/585e3ec90cf2f069ef156bfa",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include <stdio.h>\nvoid main() {\nint a[10], i, n;\nprintf(\"Enter how many values you want to read : \");\nscanf(\"%d\", &n);\nfor (i = 0; i < n; i++) {\nprintf(\"Enter the value of a[%d] : \", i);\nscanf(\"%d\", a + i);\n}\nprintf(\"The array elements are : \");\nfor (i = 0; i < n; i++) {\nprintf(\" %d \", *(a+i)); //Correct the code\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[<span class=\"\u037cd\">10</span>],<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>n;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">how</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">many</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">values</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">you</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">want</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">read</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>i);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>a<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span>i);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">are</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>*(a+i));<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//Correct</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4995fe58e11c319e214a/585e3f240cf2f069ef156c1c",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main(){\nprintf(\"Enter size of the array : \");\nint n;scanf(\"%d\",&n);\nint arr[10];\nprintf(\"Enter array elements : \");\nfor(int i=0;i<n;i++){\nscanf(\"%d\",&arr[i]);\n}printf(\"The given integer array elements : \");\n\nfor(int i=0;i<n;i++){\nprintf(\"%d \",arr[i]);\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>(){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">size</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n;scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>arr[<span class=\"\u037cd\">10</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;arr[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">given</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">integer</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,arr[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4995fe58e11c319e214a/585e3f360cf2f069ef156c28",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main(){int n;\nprintf(\"Enter size of the array : \");\nscanf(\"%d\",&n);\nchar ch[n+1];\nprintf(\"Enter array elements : \");\nfor(int i=0;i<n;i++){\nscanf(\" %c\",&ch[i]);\n}printf(\"The given character array elements : \");\nfor(int i=0;i<n;i++){\nprintf(\"%c \",ch[i]);\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>(){<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">size</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">char</span><span class=\"cm-highlightSpace\"> </span>ch[n+<span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%c\"</span>,&amp;ch[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">given</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">character</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%c</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,ch[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4995fe58e11c319e214a/5d236104e952400929172011",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include <stdio.h>\nvoid main() {\nint arr[20], number, sum = 0, min = 0, max = 0;\nscanf(\"%d\", &number);\nprintf(\"Elements: \");\nfor (int i = 0; i < number; i++) {\nscanf(\"%d\", &arr[i]);\n// }\nmax=(max>arr[i])?max:arr[i];\nif(i==0)min=arr[i];\nmin=(min<arr[i])?min:arr[i];\nsum+=arr[i];\n}\nprintf(\"Min,max,avg: %d %d %0.2f\",min,max,(float)sum/number );\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037c5\">#include</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>arr[<span class=\"\u037cd\">20</span>],<span class=\"cm-highlightSpace\"> </span>number,<span class=\"cm-highlightSpace\"> </span>sum<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>,<span class=\"cm-highlightSpace\"> </span>min<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>,<span class=\"cm-highlightSpace\"> </span>max<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;number);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Elements:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>number;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;arr[i]);<span class=\"cm-highlightTab\">\t</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">}</span></span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>max=(max&gt;arr[i])?max:arr[i];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(i==<span class=\"\u037cd\">0</span>)min=arr[i];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>min=(min&lt;arr[i])?min:arr[i];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>sum+=arr[i];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"bg-error bg-opacity-40\">printf(<span class=\"\u037ce\">\"Min,max,avg:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%0.2f\"</span></span>,min,max,(<span class=\"\u037ci\">float</span>)sum/number<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">);</span></div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4995fe58e11c319e214a/585e3fb00cf2f069ef156c49",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include <stdio.h>\nvoid main() {\nint num[5][5], i, j, rows, cols;\nprintf(\"Enter row and column sizes : \");\nscanf(\"%d %d\", &rows, &cols);\nfor (i = 0; i < rows; i++) {\nfor (j = 0; j < cols; j++) {\nprintf(\"Enter the value of num[%d][%d] : \", i, j);\nscanf(\"%d\", *(num + i) + j);\n}\n}\nprintf(\"The given matrix is\\n\");\nfor (i = 0; i < rows; i++) {\nfor (j = 0; j < cols; j++) {\nprintf(\"%d \", *(*(num + i) + j)); // Correct the code\n}\nprintf(\"\\n\");\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>num[<span class=\"\u037cd\">5</span>][<span class=\"\u037cd\">5</span>],<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>j,<span class=\"cm-highlightSpace\"> </span>rows,<span class=\"cm-highlightSpace\"> </span>cols;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">row</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">and</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">column</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sizes</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;rows,<span class=\"cm-highlightSpace\"> </span>&amp;cols);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>rows;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>cols;<span class=\"cm-highlightSpace\"> </span>j++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">num[%d][%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>j);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>*(num<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span>i)<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span>j);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">given</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">matrix</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">is</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>rows;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>cols;<span class=\"cm-highlightSpace\"> </span>j++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>*(*(num<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span>i)<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span>j));<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Correct</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4995fe58e11c319e214a/585e3fc80cf2f069ef156c54",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include <stdio.h>\nvoid main() {\nint a[3][3][3], i, j, rows, cols, pages, k;\nprintf(\"Enter page, row and column sizes : \");\nscanf(\"%d %d %d\",&rows,&cols,&pages ); // Correct the code\nfor (int i=0;i<rows;i++ ) { // Correct the code\nfor (int j=0;j<cols;j++ ) { // Correct the code\nfor (int k=0;k<pages;k++ ) { // Correct the code\nprintf(\"Enter the value of a[%d][%d][%d] : \", i, j, k);\nscanf(\"%d\",&a[i][j][k] ); // Correct the code\n}\n}\n}\nfor (int i=0;i<rows;i++ ) { // Correct the code\nfor (int j=0;j<cols;j++ ) { // Correct the code\nfor (int k=0;k<pages;k++ ) { // Correct the code\nprintf(\"The value of a[%d][%d][%d] : %d\\n\", i, j, k, a[i][j][k] ); // Correct the code\n}\n}\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[<span class=\"\u037cd\">3</span>][<span class=\"\u037cd\">3</span>][<span class=\"\u037cd\">3</span>],<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>j,<span class=\"cm-highlightSpace\"> </span>rows,<span class=\"cm-highlightSpace\"> </span>cols,<span class=\"cm-highlightSpace\"> </span>pages,<span class=\"cm-highlightSpace\"> </span>k;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">page,</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">row</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">and</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">column</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sizes</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d\"</span>,&amp;rows,&amp;cols,&amp;pages<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Correct</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;rows;i++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Correct</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;cols;j++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Correct</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>k=<span class=\"\u037cd\">0</span>;k&lt;pages;k++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Correct</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d][%d][%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>j,<span class=\"cm-highlightSpace\"> </span>k);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;a[i][j][k]<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Correct</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;rows;i++<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Correct</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;cols;j++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Correct</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>k=<span class=\"\u037cd\">0</span>;k&lt;pages;k++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Correct</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d][%d][%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>j,<span class=\"cm-highlightSpace\"> </span>k,<span class=\"cm-highlightSpace\"> </span>a[i][j][k]<span class=\"cm-highlightSpace\"> </span>);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Correct</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4995fe58e11c319e214a/585e40180cf2f069ef156c76",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main(){\nint rows,cols;\nprintf(\"Enter row and column sizes : \");scanf(\"%d%d\",&rows,&cols);int a[rows+1][cols+1];\nfor(int i=0;i<rows;i++){\nfor(int j=0;j<cols;j++){\nprintf(\"Enter the value of arr[%d][%d] : \",i,j);\nscanf(\"%d\",&a[i][j]);\n}\n}printf(\"The given matrix is\\n\");\nfor(int i=0;i<rows;i++){\nfor(int j=0;j<cols;j++){\nprintf(\"%d \",a[i][j]);\n}printf(\"\\n\");\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>(){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>rows,cols;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">row</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">and</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">column</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sizes</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);scanf(<span class=\"\u037ce\">\"%d%d\"</span>,&amp;rows,&amp;cols);<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[rows+<span class=\"\u037cd\">1</span>][cols+<span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;rows;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;cols;j++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">arr[%d][%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,i,j);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;a[i][j]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">given</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">matrix</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">is</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;rows;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;cols;j++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,a[i][j]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4995fe58e11c319e214a/585e3ff00cf2f069ef156c60",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include <stdio.h>\nvoid main() {\nint arr[5][5], i, j, rows, cols, sum;\nprintf(\"Enter row and column sizes : \");\nscanf(\"%d %d\", &rows, &cols);\nfor ( int i=0;i<rows;i++ ) { //Complete the code in for\nfor (int j=0;j<cols;j++ ) { //Complete the code in for\nprintf(\"Enter the value of arr[%d][%d] : \", i, j);\nscanf(\"%d\",&arr[i][j] ); // Complete the statement\n}\n}\nprintf(\"The given matrix is\\n\");\nfor ( int i=0;i<rows;i++) { //Complete the code in for\nfor (int j=0;j<cols;j++) { //Complete the code in for\nprintf(\"%d \",arr[i][j] ); // Complete the statement\n}\nprintf(\"\\n\");\n}\nfor (int i=0;i<rows;i++ ) { //Complete the code in for\nsum = 0 ; // Complete the statement\nfor ( int j=0;j<cols;j++ ) { //Complete the code in for\nsum =sum+arr[i][j] ; // Complete the statement\n}\nprintf(\"Sum of row - %d elements = %d\\n\", i, sum);\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037c5\">#include</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>arr[<span class=\"\u037cd\">5</span>][<span class=\"\u037cd\">5</span>],<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>j,<span class=\"cm-highlightSpace\"> </span>rows,<span class=\"cm-highlightSpace\"> </span>cols,<span class=\"cm-highlightSpace\"> </span>sum;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">row</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">and</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">column</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sizes</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;rows,<span class=\"cm-highlightSpace\"> </span>&amp;cols);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;rows;i++<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;cols;j++<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">arr[%d][%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>j);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(</span><span class=\"\u037ce\">\"%d\"</span>,&amp;arr[i][j]<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">given</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">matrix</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">is</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;rows;i++<span class=\"bg-error bg-opacity-40\">)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;cols;j++<span class=\"bg-error bg-opacity-40\">)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,</span>arr[i][j]<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;rows;i++<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>sum<span class=\"cm-highlightSpace\"> </span>=</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"bg-error bg-opacity-40\"><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;cols;j++<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>sum<span class=\"cm-highlightSpace\"> </span>=</span>sum+arr[i][j]<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">;<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Sum</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">row</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">-</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">=</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>sum);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">}</span></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4995fe58e11c319e214a/585e40700cf2f069ef156c96",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            false,
            true,
            false,
            true
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4995fe58e11c319e214a/585e40f80cf2f069ef156cb3",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include <stdio.h>\nvoid main() {\nint i, j, rows, cols;\nint a[5][5], b[5][5];\nprintf(\"Enter the order of matrix : \");\nscanf(\"%d %d\", &rows, &cols);\nprintf(\"Enter %d elements : \", rows * cols);\nfor (int i=0;i<rows;i++ ) { // Write the code in for\nfor ( int j=0;j<cols;j++) { // Write the code in for\nscanf(\"%d\", &a[i][j]);\n}\n}\nprintf(\"The given matrix is\\n\");\n// Write the code to display the given matrix\n// Fill the code in the below for loop\nfor ( int i=0;i<rows;i++) {\nfor (int j=0;j<cols;j++ ) {\nprintf(\"%d \",a[i][j] );\n}\nprintf(\"\\n\");\n}\nfor (int i=0;i<rows;i++ ) {\nfor (int j=0;j<cols;j++ ) {\nb[j][i] = a[i][j];\n}\n}\nprintf(\"Transpose of the given matrix is\\n\");\nfor (int i=0;i<cols;i++ ) { // Write the code in for\nfor (int j=0;j<rows;j++ ) { // Write the code in for\nprintf(\"%d \", b[i][j]);\n}\nprintf(\"\\n\");\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037c5\">#include</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>j,<span class=\"cm-highlightSpace\"> </span>rows,<span class=\"cm-highlightSpace\"> </span>cols;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[<span class=\"\u037cd\">5</span>][<span class=\"\u037cd\">5</span>],<span class=\"cm-highlightSpace\"> </span>b[<span class=\"\u037cd\">5</span>][<span class=\"\u037cd\">5</span>];</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">order</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">matrix</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;rows,<span class=\"cm-highlightSpace\"> </span>&amp;cols);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>rows<span class=\"cm-highlightSpace\"> </span>*<span class=\"cm-highlightSpace\"> </span>cols);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;rows;i++<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;cols;j++)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;a[i][j]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"bg-error bg-opacity-40\">}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">given</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">matrix</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">is</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">display</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">given</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">matrix</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Fill</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">below</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">loop</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"bg-error bg-opacity-40\"><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;rows;i++<span class=\"bg-error bg-opacity-40\">)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;cols;j++<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span></span>,a[i][j]<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">);</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"bg-error bg-opacity-40\"><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;rows;i++<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;cols;j++<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>b[</span>j<span class=\"bg-error bg-opacity-40\">][</span>i<span class=\"bg-error bg-opacity-40\">]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[</span>i<span class=\"bg-error bg-opacity-40\">][</span>j<span class=\"bg-error bg-opacity-40\">];</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"bg-error bg-opacity-40\">printf(<span class=\"\u037ce\">\"Transpose</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">given</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">matrix</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">is</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;cols;i++<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;rows;j++<span class=\"cm-highlightSpace\"> </span><span class=\"bg-error bg-opacity-40\">)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>b[i][j]);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">}</span></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f4995fe58e11c319e214a/5dfee9203825980b6df2fa9b",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main() {\nint rows,cols,i,j;\nint sparse_matrix[10][10];\nprintf(\"Enter the row & column sizes of the sparse matrix : \");\nscanf(\"%d %d\", &rows, &cols);\nfor (i = 0; i < rows; i++) {\nfor (j = 0; j < cols; j++) {\nprintf(\"Enter the value of sparse_matrix[%d][%d] : \",i,j);\nscanf(\"%d\", &sparse_matrix[i][j]);\n}\n}printf(\"Sparse matrix array representation\\n\");\n// Generate the array representation of sparse_matrix and print it.\nfor(int i=0;i<rows;i++){\nfor(int j=0;j<cols;j++){\nif(sparse_matrix[i][j]!=0)\nprintf(\"<%d, %d, %d>\\n\",i,j,sparse_matrix[i][j]);\n}\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>rows,cols,i,j;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>sparse_matrix[<span class=\"\u037cd\">10</span>][<span class=\"\u037cd\">10</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">row</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">&amp;</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">column</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sizes</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sparse</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">matrix</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;rows,<span class=\"cm-highlightSpace\"> </span>&amp;cols);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>rows;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>cols;<span class=\"cm-highlightSpace\"> </span>j++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sparse_matrix[%d][%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,i,j);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;sparse_matrix[i][j]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}printf(<span class=\"\u037ce\">\"Sparse</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">matrix</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">representation</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Generate</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">representation</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">sparse_matrix</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">and</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">print</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">it.</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;rows;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;cols;j++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(sparse_matrix[i][j]!=<span class=\"\u037cd\">0</span>)</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"&lt;%d,</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d,</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d&gt;</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,i,j,sparse_matrix[i][j]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f49ccfe58e11c319e2184/585e47270cf2f069ef156f33",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main() {\nint a[20], i, j, n, key, flag = 0, low, high,mid, temp;\nprintf(\"Enter value of n : \");\nscanf(\"%d\", &n);\nfor (int i=0;i<n;i++ ) { // Complete the code in for\nprintf(\"Enter element for a[%d] : \", i);\nscanf(\"%d\",&a[i] ); // Complete the statement\n}\nprintf(\"Enter key element : \");\nscanf(\"%d\", &key);\n// Bubble sort process\nfor (int i=0;i<n-1;i++ ) {\nint swap=0;// Complete the code in for\nfor (int j=0;j<n-i-1;j++ ) { // Complete the code in for\nif (a[j]>a[j+1] ) { // Write the condition part\ntemp = a[j]; // Complete the statement\na[j] = a[j+1]; // Complete the statement\na[j+1] = temp;\nswap=1;\n}\n}if(!swap)break;\n}\nprintf(\"After sorting the elements in the array are\\n\");\nfor (int i=0;i<n;i++ ) { // Complete the code in for\nprintf(\"Value of a[%d] = %d\\n\", i, a[i]);\n}\nlow =0 ; // Complete the statement\nhigh = n-1; // Complete the statement\nwhile(low<=high ) { // Complete the condition part in while\nmid = (high+low)/2 ; // Complete the statement\nif (a[mid]==key) { // Write the condition part\nflag = 1; // Complete the statement\nbreak;\n} else if (a[mid]<key ) { // Write the condition part\nlow = mid+1; // Complete the statement",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[<span class=\"\u037cd\">20</span>],<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>j,<span class=\"cm-highlightSpace\"> </span>n,<span class=\"cm-highlightSpace\"> </span>key,<span class=\"cm-highlightSpace\"> </span>flag<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>,<span class=\"cm-highlightSpace\"> </span>low,<span class=\"cm-highlightSpace\"> </span>high,mid,<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">n</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">for</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>i);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;a[i]<span class=\"cm-highlightSpace\"> </span>);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">key</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;key);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Bubble</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">sort</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">process</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n-<span class=\"\u037cd\">1</span>;i++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>swap=<span class=\"\u037cd\">0</span>;<span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;n-i-<span class=\"\u037cd\">1</span>;j++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(a[j]&gt;a[j+<span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">condition</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">part</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j];<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j+<span class=\"\u037cd\">1</span>];<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j+<span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>swap=<span class=\"\u037cd\">1</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}<span class=\"\u037cb\">if</span>(!swap)<span class=\"\u037cb\">break</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"After</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sorting</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">are</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">=</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>low<span class=\"cm-highlightSpace\"> </span>=<span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>high<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>n-<span class=\"\u037cd\">1</span>;<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(low&lt;=high<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">condition</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">part</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">while</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>mid<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(high+low)/<span class=\"\u037cd\">2</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(a[mid]==key)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">condition</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">part</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>flag<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>;<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">break</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">else</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(a[mid]&lt;key<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">condition</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">part</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>low<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>mid+<span class=\"\u037cd\">1</span>;<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-gap\" style=\"height: 313.6px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f49ccfe58e11c319e2184/58859b190cf2a7e7e1390430",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "void read1(int a[],int n){\nprintf(\"Enter %d elements : \",n);\nfor(int i=0;i<n;i++){\nscanf(\"%d\",&a[i]);\n}\n}\nvoid bubbleSort(int a[],int n){\nfor(int i=0;i<n-1;i++){int swap=0;\nfor(int j=0;j<n-i-1;j++){\nif(a[j]>a[j+1]){\nint temp=a[j];\na[j]=a[j+1];\na[j+1]=temp;\nswap=1;\n}\n}if(!swap)break;\n}\n}\nvoid display(int a[],int n){\nfor(int i=0;i<n;i++){\nprintf(\"%d \",a[i]);\n}printf(\"\\n\");\n}\nint binarySearch(int a[],int left,int right,int key){\nint flag=-1;\nwhile(left<=right){\nint mid=left+(right-left)/2;\nif(a[mid]==key){\nflag=mid;\nbreak;}\nif(a[mid]>key)right=mid-1;\nelse left=mid+1;\n}\nreturn flag;\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">read1</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[],<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">bubbleSort</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[],<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n-<span class=\"\u037cd\">1</span>;i++){<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>swap=<span class=\"\u037cd\">0</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;n-i-<span class=\"\u037cd\">1</span>;j++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[j]&gt;a[j+<span class=\"\u037cd\">1</span>]){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>temp=a[j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j]=a[j+<span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j+<span class=\"\u037cd\">1</span>]=temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>swap=<span class=\"\u037cd\">1</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}<span class=\"\u037cb\">if</span>(!swap)<span class=\"\u037cb\">break</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">display</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[],<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">binarySearch</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[],<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>left,<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>right,<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>key){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>flag=-<span class=\"\u037cd\">1</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(left&lt;=right){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>mid=left+(right-left)/<span class=\"\u037cd\">2</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[mid]==key){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>flag=mid;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">break</span>;}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[mid]&gt;key)right=mid-<span class=\"\u037cd\">1</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">else</span><span class=\"cm-highlightSpace\"> </span>left=mid+<span class=\"\u037cd\">1</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>flag;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f49ccfe58e11c319e2184/585e46c00cf2f069ef156ef2",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main() {\nint a[20], i, n, key, flag = 0, pos;\nprintf(\"Enter value of n : \");\nscanf(\"%d\", &n);\nfor (int i=0;i<n;i++ ) { //Complete the code in for\nprintf(\"Enter element for a[%d] : \", i);\nscanf(\"%d\", &a[i]);\n}\nprintf(\"Enter key element : \");\nscanf(\"%d\", &key);\nfor (int i=0;i<n;i++ ) { //Complete the code in for\nif (a[i]==key ) { //Write the condition part\nflag =1 ; // Complete the statement\npos = i; // Complete the statement\nbreak;\n}\n}\nif (flag) { //Write the condition part\nprintf(\"The key element %d is found at the position %d\\n\", key, pos);\n} else {\nprintf(\"The key element %d is not found in the array\\n\", key);\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[<span class=\"\u037cd\">20</span>],<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>n,<span class=\"cm-highlightSpace\"> </span>key,<span class=\"cm-highlightSpace\"> </span>flag<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>,<span class=\"cm-highlightSpace\"> </span>pos;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">n</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">for</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>i);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">key</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;key);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(a[i]==key<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">condition</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">part</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>flag<span class=\"cm-highlightSpace\"> </span>=<span class=\"\u037cd\">1</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>pos<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>i;<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">break</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(flag)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">condition</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">part</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">key</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">is</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">found</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">at</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">position</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>key,<span class=\"cm-highlightSpace\"> </span>pos);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">else</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">key</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">is</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">not</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">found</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>key);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f49ccfe58e11c319e2184/585e47410cf2f069ef156f50",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main() {\nint a[20], i, j, n, key, flag = 0, low, high, mid, temp;\nprintf(\"Enter value of n : \");\nscanf(\"%d\", &n);\n\nfor(int i=0;i<n;i++){\nprintf(\"Enter element for a[%d] : \",i);\nscanf(\"%d\",&a[i]);\n}\n\nprintf(\"Enter key element : \");\nscanf(\"%d\", &key);\n\n// Write the code to sort the elements using any sorting technique\nfor(int i=0;i<n;i++){int swap=0;\nfor(int j=0;j<n-1;j++){\nif(a[j]>a[j+1]){\nint temp=a[j];\na[j]=a[j+1];\na[j+1]=temp;swap=1;\n}\n}if(!swap)break;\n}\nprintf(\"After sorting the elements in the array are\\n\");\n// Write the code to display the elements\nfor(int i=0;i<n;i++){\nprintf(\"Value of a[%d] = %d\\n\",i,a[i]);\n}\nlow = 0; // Complete the statement\nhigh = n-1; // Complete the statement\n// Write the code to search an element using binary search process\nwhile(low<=high){\nmid=low+(high-low)/2;\nif(a[mid]==key){",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[<span class=\"\u037cd\">20</span>],<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>j,<span class=\"cm-highlightSpace\"> </span>n,<span class=\"cm-highlightSpace\"> </span>key,<span class=\"cm-highlightSpace\"> </span>flag<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>,<span class=\"cm-highlightSpace\"> </span>low,<span class=\"cm-highlightSpace\"> </span>high,<span class=\"cm-highlightSpace\"> </span>mid,<span class=\"cm-highlightSpace\"> </span>temp;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">n</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n);</span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">for</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,i);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">key</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;key);</span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">sort</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">using</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">any</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">sorting</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">technique</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>swap=<span class=\"\u037cd\">0</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;n-<span class=\"\u037cd\">1</span>;j++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[j]&gt;a[j+<span class=\"\u037cd\">1</span>]){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>temp=a[j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j]=a[j+<span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j+<span class=\"\u037cd\">1</span>]=temp;swap=<span class=\"\u037cd\">1</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}<span class=\"\u037cb\">if</span>(!swap)<span class=\"\u037cb\">break</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"After</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sorting</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">are</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">display</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">elements</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">=</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,i,a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>low<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>high<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>n-<span class=\"\u037cd\">1</span>;<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">search</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">an</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">using</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">binary</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">search</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">process</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(low&lt;=high){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>mid=low+(high-low)/<span class=\"\u037cd\">2</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[mid]==key){</div><div class=\"cm-gap\" style=\"height: 448px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f49ccfe58e11c319e2184/5884c7c20cf2a7e7e138f268",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "void read1(int a[],int n){\nprintf(\"Enter %d elements : \",n);\nfor(int i=0;i<n;i++){\nscanf(\"%d\",&a[i]);\n}\n}\nint linearSearch(int a[],int low, int high, int key){\nfor(int i=0;i<=high;i++){\nif(a[i]==key)return i;\n}\nreturn -1;\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">read1</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[],<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">linearSearch</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[],<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>low,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>high,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>key){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;=high;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[i]==key)<span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>i;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>-<span class=\"\u037cd\">1</span>;</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f49ccfe58e11c319e2184/585e46d60cf2f069ef156f01",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main() {\nint a[20], i, n, key, flag = 0, pos;\nprintf(\"Enter value of n : \");\nscanf(\"%d\", &n);\nfor(int i=0;i<n;i++){\nprintf(\"Enter element for a[%d] : \",i);\nscanf(\"%d\",&a[i]);\n}\nprintf(\"Enter key element : \");\nscanf(\"%d\", &key);\nfor(int i=0;i<n;i++){\nif(a[i]==key){pos=i;flag=1;break;}\n}\nif ( flag) { //Write the condition part\nprintf(\"The key element %d is found at the position %d\\n\",key,pos ); //Complete the statement\n} else {\nprintf(\"The key element %d is not found in the array\\n\",key ); //Complete the statement\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[<span class=\"\u037cd\">20</span>],<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>n,<span class=\"cm-highlightSpace\"> </span>key,<span class=\"cm-highlightSpace\"> </span>flag<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>,<span class=\"cm-highlightSpace\"> </span>pos;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">n</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n);</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">for</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,i);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">key</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;key);</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[i]==key){pos=i;flag=<span class=\"\u037cd\">1</span>;<span class=\"\u037cb\">break</span>;}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"cm-highlightSpace\"> </span>flag)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">condition</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">part</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">key</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">is</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">found</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">at</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">position</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,key,pos<span class=\"cm-highlightSpace\"> </span>);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">else</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">key</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">is</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">not</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">found</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,key<span class=\"cm-highlightSpace\"> </span>);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f49effe58e11c319e219b/585e450f0cf2f069ef156e33",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main() {\nint a[20], i, n, j, temp;\nprintf(\"Enter value of n : \");\nscanf(\"%d\", &n);\nfor (int i=0;i<n;i++ ) { // Complete the code in for\nprintf(\"Enter element for a[%d] : \", i);\nscanf(\"%d\",&a[i] ); // Complete the statement\n}\nprintf(\"Before sorting the elements in the array are\\n\");\nfor (int i=0;i<n;i++ ) { // Complete the code in for\nprintf(\"Value of a[%d] = %d\\n\", i,a[i]); // Complete the statement\n}\nfor (i=1;i<n;i++ ) { // Complete the code in for\ntemp = a[i];\nj=i-1;\n// Complete the statement\nwhile(a[j]>temp&&j>=0){\na[j+1]=a[j];\nj--;\n}\na[j+1]=temp;\n}\nprintf(\"After sorting the elements in the array are\\n\");\nfor (int i=0;i<n;i++ ) { // Complete the code in for\nprintf(\"Value of a[%d] = %d\\n\", i,a[i]); // Complete the statement\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[<span class=\"\u037cd\">20</span>],<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>n,<span class=\"cm-highlightSpace\"> </span>j,<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">n</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">for</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>i);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;a[i]<span class=\"cm-highlightSpace\"> </span>);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Before</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sorting</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">are</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">=</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>i,a[i]);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(i=<span class=\"\u037cd\">1</span>;i&lt;n;i++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[i];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>j=i-<span class=\"\u037cd\">1</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(a[j]&gt;temp&amp;&amp;j&gt;=<span class=\"\u037cd\">0</span>){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j+<span class=\"\u037cd\">1</span>]=a[j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>j--;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j+<span class=\"\u037cd\">1</span>]=temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"After</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sorting</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">are</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">=</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>i,a[i]);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f49effe58e11c319e219b/585e45250cf2f069ef156e41",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main() {\nint a[20], i, n, j, temp, pos;\nprintf(\"Enter value of n : \");\nscanf(\"%d\", &n);\nfor(int i=0;i<n;i++){\nprintf(\"Enter element for a[%d] : \",i);\nscanf(\"%d\",&a[i]);\n}\nprintf(\"Before sorting the elements in the array are\\n\");\n// write the for loop to read array elements\n// write the for loop to display array elements before sorting\nfor(int i=0;i<n;i++){\nprintf(\"Value of a[%d] = %d\\n\",i,a[i]);\n}\n// write the code to sort elements\n\nfor(int i=0;i<n;i++){\nfor(int j=0;j<n-i-1;j++){\nif(a[j]>a[j+1]){\nint temp=a[j];\na[j]=a[j+1];\na[j+1]=temp;\n}\n}\n}printf(\"After sorting the elements in the array are\\n\");\n// write the for loop to display array elements after sorting\nfor(int i=0;i<n;i++){\nprintf(\"Value of a[%d] = %d\\n\",i,a[i]);\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[<span class=\"\u037cd\">20</span>],<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>n,<span class=\"cm-highlightSpace\"> </span>j,<span class=\"cm-highlightSpace\"> </span>temp,<span class=\"cm-highlightSpace\"> </span>pos;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">n</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n);</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">for</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,i);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Before</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sorting</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">are</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">loop</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">read</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">elements</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">loop</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">display</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">before</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">sorting</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">=</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,i,a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">sort</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">elements</span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;n-i-<span class=\"\u037cd\">1</span>;j++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[j]&gt;a[j+<span class=\"\u037cd\">1</span>]){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>temp=a[j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j]=a[j+<span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j+<span class=\"\u037cd\">1</span>]=temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}printf(<span class=\"\u037ce\">\"After</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sorting</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">are</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">loop</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">display</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">after</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">sorting</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">=</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,i,a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">}</span></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f49effe58e11c319e219b/585e443e0cf2f069ef156dd4",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main() {\nint a[20], i, n, j, temp;\nprintf(\"Enter value of n : \");\nscanf(\"%d\", &n);\nfor ( int i=0;i<n;i++) { // Complete the code in for\nprintf(\"Enter element for a[%d] : \", i);\nscanf(\"%d\",&a[i] ); // Complete the statement\n}\nprintf(\"Before sorting the elements in the array are\\n\");\nfor (int i=0;i<n;i++ ) { // Complete the code in for\nprintf(\"Value of a[%d] = %d\\n\",i,a[i] ); // Complete the statement\n}\nfor (int i=0;i<n-1;i++ ) { // Complete the code in for\nfor (int j=0;j<n-i-1;j++ ) { // Complete the code in for\nif (a[j]>a[j+1] ) { // Complete the condition part\nint temp=a[j];\na[j]=a[j+1];\na[j+1]=temp;\n// Complete the statements to swap elements\n}\n}\n}\nprintf(\"After sorting the elements in the array are\\n\");\nfor (int i=0;i<n;i++ ) { // Complete the code in for\nprintf(\"Value of a[%d] = %d\\n\",i,a[i] ); // Complete the statement\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[<span class=\"\u037cd\">20</span>],<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>n,<span class=\"cm-highlightSpace\"> </span>j,<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">n</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">for</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>i);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;a[i]<span class=\"cm-highlightSpace\"> </span>);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Before</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sorting</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">are</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">=</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,i,a[i]<span class=\"cm-highlightSpace\"> </span>);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n-<span class=\"\u037cd\">1</span>;i++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;n-i-<span class=\"\u037cd\">1</span>;j++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(a[j]&gt;a[j+<span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">condition</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">part</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>temp=a[j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j]=a[j+<span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j+<span class=\"\u037cd\">1</span>]=temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statements</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">swap</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">elements</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"After</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sorting</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">are</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">=</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,i,a[i]<span class=\"cm-highlightSpace\"> </span>);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">statement</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f49effe58e11c319e219b/585e44970cf2f069ef156df4",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main() {\nint a[20], i, n, j, temp;\nprintf(\"Enter value of n : \");\nscanf(\"%d\", &n);\n// Write the for loop to read array elements\nfor(int i=0;i<n;i++){\nprintf(\"Enter element for a[%d] : \",i);\nscanf(\"%d\",&a[i]);\n}\n\nprintf(\"Before sorting the elements in the array are\\n\");\n// Write the for loop to display array elements before sorting\n\nfor(int i=0;i<n;i++){\nprintf(\"Value of a[%d] = %d\\n\",i,a[i]);\n}\n//Write the code to sort elements\nfor(int i=0;i<n-1;i++){\nfor(int j=0;j<n-i-1;j++){\nif(a[j]>a[j+1]){\nint temp=a[j];\na[j]=a[j+1];\na[j+1]=temp;\n}\n}\n}\nprintf(\"After sorting the elements in the array are\\n\");\n// Write the for loop to display array elements after sorting\nfor(int i=0;i<n;i++){\nprintf(\"Value of a[%d] = %d\\n\",i,a[i]);\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[<span class=\"\u037cd\">20</span>],<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>n,<span class=\"cm-highlightSpace\"> </span>j,<span class=\"cm-highlightSpace\"> </span>temp;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">n</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">loop</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">read</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">elements</span></span></div><div class=\"cm-line\"><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">for</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,i);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;a[i]);</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"bg-error bg-opacity-40\">printf(<span class=\"\u037ce\">\"Before</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sorting</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">are</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">loop</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">display</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">before</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">sorting</span></span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">=</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,i,a[i]);</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"bg-error bg-opacity-40\"><span class=\"\u037cm\">//Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">sort</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">elements</span></span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n-<span class=\"\u037cd\">1</span>;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;n-i-<span class=\"\u037cd\">1</span>;j++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[j]&gt;a[j+<span class=\"\u037cd\">1</span>]){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>temp=a[j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j]=a[j+<span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j+<span class=\"\u037cd\">1</span>]=temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"bg-error bg-opacity-40\">printf(<span class=\"\u037ce\">\"After</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sorting</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">are</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">loop</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">display</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">after</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">sorting</span></span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">=</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,i,a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">}</span></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f49effe58e11c319e219b/585e45e60cf2f069ef156e94",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main() {\nint a[20], i, n, j, large, index;\nprintf(\"Enter value of n : \");\nscanf(\"%d\", &n);\nfor (int i=0;i<n;i++ ) { // Complete the code in for\nprintf(\"Enter element for a[%d] : \", i);\nscanf(\"%d\", &a[i]);\n}\nprintf(\"Before sorting the elements in the array are\\n\");\nfor (int i=0;i<n;i++ ) { // Complete the code in for\nprintf(\"Value of a[%d] = %d\\n\", i, a[i]);\n}\nfor(int i=0;i<n-1;i++){\nfor(int j=0;j<n-i-1;j++){\nif(a[j]>a[j+1]){\nint temp=a[j];\na[j]=a[j+1];\na[j+1]=temp;\n}\n}\n}\nprintf(\"After sorting the elements in the array are\\n\");\nfor (int i=0;i<n;i++ ) { // Complete the code in for\nprintf(\"Value of a[%d] = %d\\n\", i, a[i]);\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[<span class=\"\u037cd\">20</span>],<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>n,<span class=\"cm-highlightSpace\"> </span>j,<span class=\"cm-highlightSpace\"> </span>large,<span class=\"cm-highlightSpace\"> </span>index;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">n</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">for</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>i);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Before</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sorting</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">are</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">=</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n-<span class=\"\u037cd\">1</span>;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;n-i-<span class=\"\u037cd\">1</span>;j++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[j]&gt;a[j+<span class=\"\u037cd\">1</span>]){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>temp=a[j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j]=a[j+<span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j+<span class=\"\u037cd\">1</span>]=temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"After</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sorting</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">are</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">=</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f49effe58e11c319e219b/585e45fb0cf2f069ef156ea1",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main() {\nint a[20], i, n, j, large, index;\nprintf(\"Enter value of n : \");\nscanf(\"%d\", &n);\n// Write the code to read an array elements\nfor(int i = 0 ;i < n ; i++) {\nprintf(\"Enter element for a[%d] : \",i);\nscanf(\"%d\",&a[i]);\n}\nprintf(\"Before sorting the elements in the array are\\n\");\n// Write the code to print the given array elements before sorting\nfor(int i = 0 ;i < n ; i++) {\nprintf(\"Value of a[%d] = %d\\n\",i,a[i]);\n}\n// Write the code for selection sort largest element method\nfor(int i = 0 ;i < n - 1; i++) {\nfor(int j = 0 ;j < n - i - 1 ; j++) {\nif (a[j] > a[j+1]) {\nint temp = a[j];\na[j] = a[j + 1];\na[j + 1] = temp;\n}\n}\n}\nprintf(\"After sorting the elements in the array are\\n\");\n// Write the code to print the given array elements after sorting\nfor(int i = 0 ;i < n ; i++) {\nprintf(\"Value of a[%d] = %d\\n\",i,a[i]);\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[<span class=\"\u037cd\">20</span>],<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>n,<span class=\"cm-highlightSpace\"> </span>j,<span class=\"cm-highlightSpace\"> </span>large,<span class=\"cm-highlightSpace\"> </span>index;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">n</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">read</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">an</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">elements</span></span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">for</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,i);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Before</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sorting</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">are</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">print</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">given</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">before</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">sorting</span></span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">=</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,i,a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"bg-error bg-opacity-40\"><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">selection</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">sort</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">largest</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">method</span></span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;j<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>j++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(a[j]<span class=\"cm-highlightSpace\"> </span>&gt;<span class=\"cm-highlightSpace\"> </span>a[j+<span class=\"\u037cd\">1</span>])<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"bg-error bg-opacity-40\">printf(<span class=\"\u037ce\">\"After</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sorting</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">are</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">print</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">given</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">after</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">sorting</span></span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">=</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,i,a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">}</span></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f49effe58e11c319e219b/585e46720cf2f069ef156eda",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main() {\nint a[20], i, n, j, small, index;\nprintf(\"Enter value of n : \");\nscanf(\"%d\", &n);\n// Write the code to read an array elements\nfor( int i=0;i<n;i++){\nprintf(\"Enter element for a[%d] : \",i);\nscanf(\"%d\",&a[i]);\n}\nprintf(\"Before sorting the elements in the array are\\n\");\n// Write the code to print the given array elements before sorting\nfor(int i=0;i<n;i++){\nprintf(\"Value of a[%d] = %d\\n\",i,a[i]);\n}\n// Write the code for selection sort smallest element method\nfor(int i=0;i<n;i++){\nfor(int j=0;j<n-i-1;j++){\nif(a[j]>a[j+1]){\nint temp=a[j];\na[j]=a[j+1];\na[j+1]=temp;\n}\n}\n}\nprintf(\"After sorting the elements in the array are\\n\");\n// Write the code to print the given array elements after sorting\nfor(int i=0;i<n;i++){\nprintf(\"Value of a[%d] = %d\\n\",i,a[i]);\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[<span class=\"\u037cd\">20</span>],<span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>n,<span class=\"cm-highlightSpace\"> </span>j,<span class=\"cm-highlightSpace\"> </span>small,<span class=\"cm-highlightSpace\"> </span>index;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">n</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">read</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">an</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">elements</span></span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">for</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,i);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"bg-error bg-opacity-40\">printf(<span class=\"\u037ce\">\"Before</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sorting</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">are</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">print</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">given</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">before</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">sorting</span></span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">=</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,i,a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"bg-error bg-opacity-40\"><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">selection</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">sort</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">smallest</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">method</span></span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;n-i-<span class=\"\u037cd\">1</span>;j++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[j]&gt;a[j+<span class=\"\u037cd\">1</span>]){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>temp=a[j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j]=a[j+<span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j+<span class=\"\u037cd\">1</span>]=temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"bg-error bg-opacity-40\">printf(<span class=\"\u037ce\">\"After</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">sorting</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">are</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">print</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">given</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">after</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">sorting</span></span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Value</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">a[%d]</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">=</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,i,a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">}</span></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f49effe58e11c319e219b/5c3984c00788cb06f0d177dd",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "int partition(int arr[15], int lb, int ub);\nvoid display(int arr[15], int n) {\nint i;\nfor (int i=0;i<n;i++) // Complete the code in for\nprintf(\"%d \", arr[i]);\nprintf(\"\\n\");\n}\nvoid quickSort(int arr[15], int low, int high) {\nint j;\nif (low<high) { // Write the condition\nj = partition(arr, low, high);\nquickSort(arr,low,j-1); // Call the first partition\nquickSort(arr,j+1,high); // Call the second partition\n}\n}\nint partition(int arr[15], int lb, int ub) {\nint pivot, down = lb, up = ub, temp;\npivot = arr[lb]; // Assign the index as lower bound\nwhile (down<up) { // Write the condition\nwhile (arr[down]<=pivot &&down<up) { // Write the condition where the down value is to be incremented by 1\ndown++;\n}\nwhile (arr[up]>pivot) { // Write the condition where the up value is to be decremented by 1\nup--;\n}\nif (down<up) { // Write the condition to Swap values\ntemp = arr[up];\narr[up] = arr[down];\narr[down] = temp;\n}\n}\narr[lb] = arr[up]; // Assign the correct index\narr[up] = pivot; // Assign the correct index\nreturn up;\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">partition</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>arr[<span class=\"\u037cd\">15</span>],<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>lb,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>ub);</div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">display</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>arr[<span class=\"\u037cd\">15</span>],<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++)<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>arr[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">quickSort</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>arr[<span class=\"\u037cd\">15</span>],<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>low,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>high)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(low&lt;high)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">condition</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>partition(arr,<span class=\"cm-highlightSpace\"> </span>low,<span class=\"cm-highlightSpace\"> </span>high);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>quickSort(arr,low,j-<span class=\"\u037cd\">1</span>);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Call</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">first</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">partition</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>quickSort(arr,j+<span class=\"\u037cd\">1</span>,high);<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Call</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">second</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">partition</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">partition</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>arr[<span class=\"\u037cd\">15</span>],<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>lb,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>ub)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>pivot,<span class=\"cm-highlightSpace\"> </span>down<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>lb,<span class=\"cm-highlightSpace\"> </span>up<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>ub,<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>pivot<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>arr[lb];<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Assign</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">index</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">as</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">lower</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">bound</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(down&lt;up)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">condition</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(arr[down]&lt;=pivot<span class=\"cm-highlightSpace\"> </span>&amp;&amp;down&lt;up)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">condition</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">where</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">down</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">is</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">be</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">incremented</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">by</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">1</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>down++;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(arr[up]&gt;pivot)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">condition</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">where</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">up</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">value</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">is</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">be</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">decremented</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">by</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">1</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>up--;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(down&lt;up)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">condition</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Swap</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">values</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>arr[up];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>arr[up]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>arr[down];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>arr[down]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>arr[lb]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>arr[up];<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Assign</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">correct</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">index</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>arr[up]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>pivot;<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Assign</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">correct</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">index</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>up;</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f49effe58e11c319e219b/5c39a0640788cb06f0d18d8e",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "void display(int arr[15], int n) {\nfor(int i=0;i<n;i++){\nprintf(\"%d \",arr[i]);\n}printf(\"\\n\");\n}\nint partition(int arr[15], int lb, int ub) {\nreturn 9;\n}\nvoid quickSort(int arr[15], int low, int high) {\nfor(int i=0;i<=high;i++){\nfor(int j=0;j<=high-i-1;j++) {\nif(arr[j]>arr[j+1]){\nint temp=arr[j];\narr[j]=arr[j+1];\narr[j+1]=temp;\n}\n}\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">display</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>arr[<span class=\"\u037cd\">15</span>],<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,arr[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">partition</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>arr[<span class=\"\u037cd\">15</span>],<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>lb,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>ub)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">9</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">quickSort</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>arr[<span class=\"\u037cd\">15</span>],<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>low,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>high)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;=high;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;=high-i-<span class=\"\u037cd\">1</span>;j++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(arr[j]&gt;arr[j+<span class=\"\u037cd\">1</span>]){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>temp=arr[j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>arr[j]=arr[j+<span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>arr[j+<span class=\"\u037cd\">1</span>]=temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">}</span></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f49effe58e11c319e219b/5c29c5720788cb365b85369c",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "void display(int arr[15], int n) {\nint i;\nfor (int i=0;i<n;i++) // Complete the code in for\nprintf(\"%d \", arr[i]);\nprintf(\"\\n\");\n}\nvoid splitAndMerge(int a[], int low, int high) {\nfor(int i=0;i<=high;i++) {\nfor(int j=0;j<=high-i-1;j++) {\nif(a[j]>a[j+1]){\nint temp=a[j];\na[j]=a[j+1];\na[j+1]=temp;\n}\n}\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">display</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>arr[<span class=\"\u037cd\">15</span>],<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++)<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Complete</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">for</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>arr[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\">}<span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">splitAndMerge</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[],<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>low,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>high)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;=high;i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;=high-i-<span class=\"\u037cd\">1</span>;j++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[j]&gt;a[j+<span class=\"\u037cd\">1</span>]){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>temp=a[j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j]=a[j+<span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j+<span class=\"\u037cd\">1</span>]=temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/678f49effe58e11c319e219b/5c2a1b920788cb365b412ce8",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "void display(int a[15], int n) {\nfor(int i=0;i<n;i++){\nprintf(\"%d \",a[i]);\n}\nprintf(\"\\n\");}\n\nvoid splitAndMerge(int a[5], int low, int high) {\nfor(int i=0;i<=high;i++) {\nfor(int j=0;j<=high-i-1;j++){\nif(a[j]>a[j+1]){\nint temp=a[j];\na[j]=a[j+1];\na[j+1]=temp;\n}\n}\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">display</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[<span class=\"\u037cd\">15</span>],<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">splitAndMerge</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[<span class=\"\u037cd\">5</span>],<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>low,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>high)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;=high;i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j=<span class=\"\u037cd\">0</span>;j&lt;=high-i-<span class=\"\u037cd\">1</span>;j++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[j]&gt;a[j+<span class=\"\u037cd\">1</span>]){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>temp=a[j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j]=a[j+<span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j+<span class=\"\u037cd\">1</span>]=temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/6799ede6ff8c0a15997e3735/67908c1dd94dcc1637eb5583",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main(){\nint n,s1=0,s2=0;\nscanf(\"%d\",&n);\nint a[n+1];\nfor(int i=0;i<n;i++){\nscanf(\"%d\",&a[i]);\n}\nfor(int i=0;i<n;i++){\nif(a[i]>0)s1+=a[i];\nelse s2+=a[i];\n}\nprintf(\"%d\\n%d\\n\",s1,s2);\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>(){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n,s1=<span class=\"\u037cd\">0</span>,s2=<span class=\"\u037cd\">0</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[n+<span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[i]&gt;<span class=\"\u037cd\">0</span>)s1+=a[i];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">else</span><span class=\"cm-highlightSpace\"> </span>s2+=a[i];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,s1,s2);</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/6799ede6ff8c0a15997e3735/67908e39d94dcc1637eb5d58",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\n#include<stdbool.h>\nvoid main(){int hash[101];\nbool isDup=false;\nint n;\nscanf(\"%d\",&n);\nint a[n+1];\nfor(int i=0;i<n;i++){\nscanf(\"%d\",&a[i]);\nhash[a[i]]++;\nif(hash[a[i]]>=2)isDup=true;\n}\n\nif(isDup)printf(\"true\\n\");\nelse printf(\"false\\n\");\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdbool.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>(){<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>hash[<span class=\"\u037cd\">101</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">bool</span><span class=\"cm-highlightSpace\"> </span>isDup=<span class=\"\u037cc\">false</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[n+<span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>hash[a[i]]++;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(hash[a[i]]&gt;=<span class=\"\u037cd\">2</span>)isDup=<span class=\"\u037cc\">true</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(isDup)printf(<span class=\"\u037ce\">\"true</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">else</span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"false</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/6799ede6ff8c0a15997e3735/67908f98d94dcc1637eb6166",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main(){\nint rows, cols;\nscanf(\"%d %d\",&rows, &cols);\nint nums[rows][cols];\nfor( int i = 0; i < rows; i++) {\nfor( int j = 0; j < cols; j++) {\nscanf(\"%d\",&nums[i][j]);\n}\n}\nint i1 , j1, i2, j2,sum = 0;\nscanf(\"%d %d %d %d\", &i1, &j1, &i2, &j2);\nfor(int i = i1-1 ; i < i2; i++) {\nfor( int j = j1-1 ; j < j2; j++) {\nsum += nums[i][j];\n}\n}\n\nprintf(\"%d\\n\",sum);\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>(){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>rows,<span class=\"cm-highlightSpace\"> </span>cols;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d\"</span>,&amp;rows,<span class=\"cm-highlightSpace\"> </span>&amp;cols);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>nums[rows][cols];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>rows;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>cols;<span class=\"cm-highlightSpace\"> </span>j++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;nums[i][j]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i1<span class=\"cm-highlightSpace\"> </span>,<span class=\"cm-highlightSpace\"> </span>j1,<span class=\"cm-highlightSpace\"> </span>i2,<span class=\"cm-highlightSpace\"> </span>j2,sum<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;i1,<span class=\"cm-highlightSpace\"> </span>&amp;j1,<span class=\"cm-highlightSpace\"> </span>&amp;i2,<span class=\"cm-highlightSpace\"> </span>&amp;j2);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>i1-<span class=\"\u037cd\">1</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>i2;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>j1-<span class=\"\u037cd\">1</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>j2;<span class=\"cm-highlightSpace\"> </span>j++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>sum<span class=\"cm-highlightSpace\"> </span>+=<span class=\"cm-highlightSpace\"> </span>nums[i][j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,sum);</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/6799ede6ff8c0a15997e3735/6790947ed94dcc1637eb7174",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\n#define MOD 100\nvoid main() {\nint n;\nscanf(\"%d\", &n);\nint arr[n],stack[n],fear[n];\nint top=-1;\nfor(int i = 0 ;i < n ;i++) {\nscanf(\"%d\", &arr[i]);\n}\nfor(int i = n-1 ; i >= 0; i--) {\nwhile( top >=0 && arr[stack[top]] >= arr[i]) {\ntop--;\n}\nif(top == -1) {\nfear[i] = 1 ;\n}\nelse {\nfear[i] = stack[top] - i + 1 ;\n}\nstack[++top] =i;\n}\nlong long ans = 1;\nfor(int i = 0 ;i < n ;i++) {\nans = (ans * fear[i]) % MOD;\n}\nprintf(\"%lld\\n\", ans);\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037c5\">#define</span><span class=\"cm-highlightSpace\"> </span>MOD<span class=\"cm-highlightSpace\"> </span>100</div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>arr[n],stack[n],fear[n];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>top=-<span class=\"\u037cd\">1</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;arr[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>n-<span class=\"\u037cd\">1</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&gt;=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>i--)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(<span class=\"cm-highlightSpace\"> </span>top<span class=\"cm-highlightSpace\"> </span>&gt;=<span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>&amp;&amp;<span class=\"cm-highlightSpace\"> </span>arr[stack[top]]<span class=\"cm-highlightSpace\"> </span>&gt;=<span class=\"cm-highlightSpace\"> </span>arr[i])<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>top--;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(top<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span>-<span class=\"\u037cd\">1</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>fear[i]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span><span class=\"cm-highlightSpace\"> </span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">else</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>fear[i]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>stack[top]<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span><span class=\"cm-highlightSpace\"> </span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>stack[++top]<span class=\"cm-highlightSpace\"> </span>=i;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">long</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">long</span><span class=\"cm-highlightSpace\"> </span>ans<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>ans<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(ans<span class=\"cm-highlightSpace\"> </span>*<span class=\"cm-highlightSpace\"> </span>fear[i])<span class=\"cm-highlightSpace\"> </span>%<span class=\"cm-highlightSpace\"> </span>MOD;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%lld</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>ans);</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/6799ede6ff8c0a15997e3735/67909740d94dcc1637eb7bc0",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid RunTC(int n) {\nint nums[n], prefix[n], suffix[n], ans[n];\nprefix[0] = 0;\nfor( int i = 0 ; i < n; i++){\nscanf(\"%d\", &nums[i]) ;\nif(i > 0) {\nprefix[i] = prefix[i-1] + nums[i-1] ;\n}\n}suffix[n-1] = 0 ;\nfor(int i = n - 2 ; i >= 0 ; i--) {\nsuffix[i] = suffix[i+1] + nums[i+1] ;\n}\nfor(int i = 0 ; i < n ;i++) {\nans[i] = prefix[i] + suffix[i];\nprintf(\"%d \",ans[i]);\n}\nprintf(\"\\n\");\n}\nvoid main() {\nint T;\nscanf(\"%d\", &T);\nwhile(T--) {\nint n;\nscanf(\"%d\" ,&n);\nRunTC(n);\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">RunTC</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>nums[n],<span class=\"cm-highlightSpace\"> </span>prefix[n],<span class=\"cm-highlightSpace\"> </span>suffix[n],<span class=\"cm-highlightSpace\"> </span>ans[n];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>prefix[<span class=\"\u037cd\">0</span>]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n;<span class=\"cm-highlightSpace\"> </span>i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;nums[i])<span class=\"cm-highlightSpace\"> </span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(i<span class=\"cm-highlightSpace\"> </span>&gt;<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>prefix[i]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>prefix[i-<span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span>nums[i-<span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}suffix[n-<span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">2</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&gt;=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i--)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>suffix[i]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>suffix[i+<span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span>nums[i+<span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>ans[i]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>prefix[i]<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span>suffix[i];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,ans[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\">}</div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>T;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;T);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(T--)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span><span class=\"cm-highlightSpace\"> </span>,&amp;n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>RunTC(n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/6799ede6ff8c0a15997e3735/67909a6dd94dcc1637eb857a",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nint search(int a[][2],int key,int n) {\nfor(int i = 0;i < n; i++){\nif(a[i][0]==key)return i;\n}return -1;\n}\nvoid main() {\nint n,m,index=0;\nscanf(\"%d %d\", &n, &m);\nint a[n][2];\nfor(int i = 0 ;i < n; i++) {\nint temp;\nscanf(\"%d\", &temp);\nint idx=search(a, temp, index);\nif(idx==-1){\na[index][0]=temp;\na[index][1]=1;\nindex++;\n}\nelse a[idx][1]++;\n}\nfor(int i = 0 ; i < index - 1;i++){int swap = 0;\nfor(int j = 0; j < index - i - 1; j++){\nif(a[j][1] < a[j+1][1]) {\nint num = a[j][0],freq = a[j][1];\na[j][0] = a[j+1][0];\na[j][1] = a[j+1][1];\na[j+1][0] = num;\na[j+1][1] = freq;\nswap=1;\n}\n}if(!swap)break;\n}\nfor(int i = 0 ;i < index ;i++){\nfor(int j = 0; j < a[i][1] ; j++ )",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">search</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[][<span class=\"\u037cd\">2</span>],<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>key,<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n;<span class=\"cm-highlightSpace\"> </span>i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[i][<span class=\"\u037cd\">0</span>]==key)<span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>i;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}<span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>-<span class=\"\u037cd\">1</span>;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n,m,index=<span class=\"\u037cd\">0</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n,<span class=\"cm-highlightSpace\"> </span>&amp;m);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[n][<span class=\"\u037cd\">2</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;temp);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>idx=search(a,<span class=\"cm-highlightSpace\"> </span>temp,<span class=\"cm-highlightSpace\"> </span>index);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(idx==-<span class=\"\u037cd\">1</span>){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[index][<span class=\"\u037cd\">0</span>]=temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[index][<span class=\"\u037cd\">1</span>]=<span class=\"\u037cd\">1</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>index++;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">else</span><span class=\"cm-highlightSpace\"> </span>a[idx][<span class=\"\u037cd\">1</span>]++;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>index<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>;i++){<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>swap<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>index<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>;<span class=\"cm-highlightSpace\"> </span>j++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[j][<span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>a[j+<span class=\"\u037cd\">1</span>][<span class=\"\u037cd\">1</span>])<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>num<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j][<span class=\"\u037cd\">0</span>],freq<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j][<span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j][<span class=\"\u037cd\">0</span>]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j+<span class=\"\u037cd\">1</span>][<span class=\"\u037cd\">0</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j][<span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j+<span class=\"\u037cd\">1</span>][<span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j+<span class=\"\u037cd\">1</span>][<span class=\"\u037cd\">0</span>]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>num;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j+<span class=\"\u037cd\">1</span>][<span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>freq;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>swap=<span class=\"\u037cd\">1</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}<span class=\"\u037cb\">if</span>(!swap)<span class=\"\u037cb\">break</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>index<span class=\"cm-highlightSpace\"> </span>;i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>a[i][<span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>j++<span class=\"cm-highlightSpace\"> </span>)</div><div class=\"cm-gap\" style=\"height: 67.2px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/6799ede6ff8c0a15997e3735/67909fabd94dcc1637eb92c7",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main() {\nint n;\nscanf(\"%d\", &n);\nint nums[n];\nfor(int i = 0 ;i < n ;i++) {\nscanf(\"%d\",&nums[i]);\n}\nint idx=-1,target;\nscanf(\"%d\",&target);\nfor(int i = 0 ;i < n ; i++) {\nif(nums[i] == target || (nums[i] > target && idx == -1) ) {\nidx = i ;\nbreak;\n}\n}\nprintf(\"%d\\n\",idx);\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>nums[n];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;nums[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>idx=-<span class=\"\u037cd\">1</span>,target;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;target);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(nums[i]<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span>target<span class=\"cm-highlightSpace\"> </span>||<span class=\"cm-highlightSpace\"> </span>(nums[i]<span class=\"cm-highlightSpace\"> </span>&gt;<span class=\"cm-highlightSpace\"> </span>target<span class=\"cm-highlightSpace\"> </span>&amp;&amp;<span class=\"cm-highlightSpace\"> </span>idx<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span>-<span class=\"\u037cd\">1</span>)<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>idx<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">break</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,idx);</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/6799ede6ff8c0a15997e3735/6790a195d94dcc1637eb95c3",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main() {\nint n;\nscanf(\"%d\", &n);\nint a[n];\nfor(int i = 0 ;i < n ; i++) {\nscanf(\"%d\" , &a[i]);\n}\nfor(int i = 0 ;i < n; i++){\nfor(int j = 0 ; j < n - i - 1 ;j++){\nif(a[j] > a[j+1]) {\nint temp = a[j];\na[j] = a[j+1];\na[j+1] = temp;\n}\n}\n}\nfor(int i = 0 ;i < n ; i++) {\nprintf(\"%d \" , a[i]);\n}printf(\"\\n\");\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[n];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span><span class=\"cm-highlightSpace\"> </span>,<span class=\"cm-highlightSpace\"> </span>&amp;a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n;<span class=\"cm-highlightSpace\"> </span>i++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span><span class=\"cm-highlightSpace\"> </span>;j++){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[j]<span class=\"cm-highlightSpace\"> </span>&gt;<span class=\"cm-highlightSpace\"> </span>a[j+<span class=\"\u037cd\">1</span>])<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j+<span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j+<span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span><span class=\"cm-highlightSpace\"> </span>,<span class=\"cm-highlightSpace\"> </span>a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/6799ede6ff8c0a15997e3735/6790b559d94dcc1637ebc769",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main(){\nint n;\nscanf(\"%d\", &n);\nint a[n];\nfor ( int i = 0 ; i < n ;i++) {\nscanf(\"%d\",&a[i]);\n}\nfor( int i = 0 ; i < n ;i++) {\nprintf(\"%d \",a[i]);\n}printf(\"\\n\");\nfor (int i = 0 ;i < n - 1 ; i++) {\nfor (int j = 0 ; j < n - i - 1; j++) {\nif(a[j] > a[j+1]) {\nint temp = a[j];\na[j] = a[j+1];\na[j+1] = temp;\n}\n}\n}\n\n\nfor( int i = 0 ; i < n ;i++) {\nprintf(\"%d \",a[i]);\n}printf(\"\\n\");\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>(){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[n];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>;<span class=\"cm-highlightSpace\"> </span>j++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[j]<span class=\"cm-highlightSpace\"> </span>&gt;<span class=\"cm-highlightSpace\"> </span>a[j+<span class=\"\u037cd\">1</span>])<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j+<span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j+<span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/6799ede6ff8c0a15997e3735/6790b89bd94dcc1637ebd546",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include <stdio.h>\n\n\nvoid mergeSort(int a[], int left, int right) {\nfor(int i = 0 ; i < right ;i++) {\nfor(int j = 0 ; j <= right- i - 1; j++) {\nif (a[j] > a[j + 1]) {\nint temp = a[j];\na[j] = a[j + 1];\na[j + 1] = temp;\n}\n}\n}\n}\n\n// Function to print an array\nvoid printArray(int a[], int size) {\nfor (int i = 0 ; i < size; i++) {\nprintf(\"%d \",a[i]);\n}printf(\"\\n\");\n}\n\nint main() {\nint n;\n// Input the size of the array\nprintf(\"\");\nscanf(\"%d\", &n);\nint arr[n];\n// Input the elements of the array\nprintf(\"\");\nfor (int i = 0; i < n; i++) {\nscanf(\"%d\", &arr[i]);",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">mergeSort</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[],<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>left,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>right)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>right<span class=\"cm-highlightSpace\"> </span>;i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>&lt;=<span class=\"cm-highlightSpace\"> </span>right-<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>;<span class=\"cm-highlightSpace\"> </span>j++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(a[j]<span class=\"cm-highlightSpace\"> </span>&gt;<span class=\"cm-highlightSpace\"> </span>a[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>])<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Function</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">print</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">an</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">array</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">printArray</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[],<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>size)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>size;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,a[i]);</div><div class=\"cm-line\">}printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Input</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">size</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">array</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>arr[n];</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Input</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">array</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;arr[i]);</span></div><div class=\"cm-gap\" style=\"height: 358.4px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/6799edfcff8c0a15997e3777/631eef27c4d5d8075098c89d",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main() {\nunsigned int n;\nscanf(\"%d\",&n);\nint a[n];\nfor(int i = 0 ; i < n; i++) {\nscanf(\"%d\", &a[i]);\n}\nfor(int i = 0 ; i < n-1 ; i++) {\na[i]+=a[i+1];\n}\nfor(int i = 0 ; i < n; i++) {\nprintf(\"%d \", a[i]);\n}printf(\"\\n\");\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">unsigned</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[n];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n-<span class=\"\u037cd\">1</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[i]+=a[i+<span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/6799edfcff8c0a15997e3777/669759fb7b61a4504819f941",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nvoid main() {\nint n;\nscanf(\"%d\", &n);\nint a[n];\nfor(int i = 0 ; i < n; i++) {\nscanf(\"%d\", &a[i]);\n}\nint k,s=0;\nscanf(\"%d\",&k);\nfor(int i = 0 ; i < n ;i++) {\nfor(int j = i + 1 ;j < n; j++) {\nif(a[i] + a[j] == k){\nprintf(\"%d %d\\n\",a[i],a[j]);\ns++;\n}\n}\n}printf(\"%d\\n\",s);\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[n];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>k,s=<span class=\"\u037cd\">0</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;k);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span><span class=\"cm-highlightSpace\"> </span>;j<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n;<span class=\"cm-highlightSpace\"> </span>j++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[i]<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span>a[j]<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span>k){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,a[i],a[j]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>s++;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}printf(<span class=\"\u037ce\">\"%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,s);</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/6799edfcff8c0a15997e3777/630480a0da93ab0742cf22a3",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include <stdio.h>\n\nvoid selectionSort(int a[],int n) {\nfor (int i = 0 ;i < n;i++) {\nfor(int j = 0 ; j < n - i - 1 ; j++) {\nif(a[j] > a[j + 1]) {\nint temp = a[j];\na[j] = a[j + 1];\na[j + 1] = temp;\n}\n}\n}\n}\n\n\n\n\nint main() {\nint n;\n// Input: Number of elements in the array\nscanf(\"%d\", &n);\nint arr[n], i;\n// Input: Elements of the array\nfor (i = 0; i < n; i++) {\nscanf(\"%d\", &arr[i]);\n}\n// Call the selectionSort function to sort the array\nselectionSort(arr, n);\n// Output: Sorted array\nfor (i = 0; i < n; i++) {\nprintf(\"%d \", arr[i]);\n}\nprintf(\"\\n\");",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037c5\">#include</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">selectionSort</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[],<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n;i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>j++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[j]<span class=\"cm-highlightSpace\"> </span>&gt;<span class=\"cm-highlightSpace\"> </span>a[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>])<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Input:</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Number</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">array</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>arr[n],<span class=\"cm-highlightSpace\"> </span>i;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Input:</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Elements</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">array</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;arr[i]);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Call</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">selectionSort</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">function</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">sort</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">array</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>selectionSort(arr,<span class=\"cm-highlightSpace\"> </span>n);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Output:</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Sorted</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">array</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>arr[i]);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-gap\" style=\"height: 67.2px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/6799edfcff8c0a15997e3777/6565d99cfaa7080c29939111",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include <stdio.h>\n\n// Function to perform modified Bubble Sort on an array of quantities\nvoid bubbleSortWithSmallest(int arr[], int n) {\nfor(int i = 0 ;i < n ; i++) {\nfor(int j = 0 ; j < n - i - 1; j++) {\nif( arr[j] > arr[j + 1]){\nint temp = arr[j];\narr[j] = arr[j + 1];\narr[j + 1] = temp;\n}\n}\n}\n\n}\n\nint main() {\nint n;\nscanf(\"%d\",&n);\nif(n<=0){\nprintf(\"Invalid number\\n\");\nreturn 1;\n}\nint quantities[n];\nfor (int i=0;i<n;i++){\nscanf(\"%d\",&quantities[i]);\n}\nprintf(\"Original Quantities: \");\nfor (int i = 0; i < n; i++) {\nprintf(\"%d \",quantities[i]);\n}\nprintf(\"\\n\");",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037c5\">#include</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Function</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">to</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">perform</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">modified</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Bubble</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Sort</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">on</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">an</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">array</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">quantities</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">bubbleSortWithSmallest</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>arr[],<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>;<span class=\"cm-highlightSpace\"> </span>j++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span>(<span class=\"cm-highlightSpace\"> </span>arr[j]<span class=\"cm-highlightSpace\"> </span>&gt;<span class=\"cm-highlightSpace\"> </span>arr[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>]){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>arr[j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>arr[j]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>arr[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>arr[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">}</span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;n);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(n&lt;=<span class=\"\u037cd\">0</span>){</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Invalid</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">number</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>quantities[n];</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i=<span class=\"\u037cd\">0</span>;i&lt;n;i++){</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;quantities[i]);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"Original</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">Quantities:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,quantities[i]);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-gap\" style=\"height: 224px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/6799edfcff8c0a15997e3777/6582dbb26a331d42f5a1b97d",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nint main () {\nint n;\nscanf(\"%d\",&n);\nif(n <= 0 ){\nprintf(\"Invalid number\\n\");\nreturn 0;\n}\nint a[n];\nfor(int i = 0 ; i < n ; i++) {\nscanf(\"%d\", &a[i]);\n}\nprintf(\"Original Scores: \");\nfor(int i = 0 ; i < n ; i++) {\nprintf(\"%d \", a[i]);\n}printf(\"\\n\");\nfor(int i = 0 ; i < n ; i++) {\nfor(int j = 0 ; j < n - i - 1 ; j++) {\nif( a[j] < a[j + 1]) {\nint temp = a[j];\na[j] = a[j + 1];\na[j + 1] = temp;\n}\n}\n}\nprintf(\"Sorted Scores: \");\nfor(int i = 0 ; i < n ; i++) {\nprintf(\"%d \", a[i]);\n}printf(\"\\n\");\nreturn 0;\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span><span class=\"cm-highlightSpace\"> </span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(n<span class=\"cm-highlightSpace\"> </span>&lt;=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Invalid</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">number</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[n];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;a[i]);</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Original</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">Scores:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>a[i]);</div><div class=\"cm-line\">}printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>j++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(<span class=\"cm-highlightSpace\"> </span>a[j]<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>a[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>])<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Sorted</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">Scores:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>a[i]);</div><div class=\"cm-line\">}printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/6799edfcff8c0a15997e3777/6582dc786a331d42f5a1ba32",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nint main() {\nint n;\nscanf(\"%d\", &n);\nif(n <= 0){\nprintf(\"Invalid number\\n\");\nreturn 0;\n}\nint a[n];\nfor (int i = 0 ; i < n ; i++) {\nscanf(\"%d\",&a[i]);\n}\nprintf(\"Original Popularity Scores: \");\nfor (int i = 0 ; i < n ; i++) {\nprintf(\"%d \",a[i]);\n}printf(\"\\n\");\nfor (int i = 0 ; i < n - 1 ; i++)\nfor (int j = 0 ; j < n - i - 1 ; j++) {\nif(a[j] < a[j + 1]) {\nint temp = a[j];\na[j] = a[j + 1];\na[j + 1] = temp;\n}\n}\n\nprintf(\"Sorted Popularity Scores: \");\nfor (int i = 0 ; i < n ; i++) {\nprintf(\"%d \",a[i]);\n}printf(\"\\n\");\nreturn 1;\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(n<span class=\"cm-highlightSpace\"> </span>&lt;=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Invalid</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">number</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[n];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Original</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">Popularity</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">Scores:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,a[i]);</div><div class=\"cm-line\">}printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>j++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[j]<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>a[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>])<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Sorted</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">Popularity</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">Scores:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,a[i]);</div><div class=\"cm-line\">}printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><br></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/6799edfcff8c0a15997e3777/6582c3806a331d42f5a194c5",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nint main() {\nint n;\nprintf(\"Number of books: \");\nscanf(\"%d\",&n);\nif(n <= 0) {\nprintf(\"Invalid number of books\\n\");\nreturn 0;\n}\nfloat a[n];\nfor(int i = 0 ;i < n ; i++) {\nprintf(\"Book %d price: \",i+1);\nscanf(\"%f\", &a[i]);\n}\nfor(int i = 0 ;i < n -1 ;i++) {\nfor(int j = 0 ; j < n - i - 1 ;j++) {\nif(a[j] > a[j + 1]){\nfloat temp = a[j];\na[j] = a[j + 1];\na[j + 1] =temp;\n}\n}\n}\nprintf(\"Sorted list of book prices:\\n\");\nfor(int i = 0 ;i < n ; i++) {\nprintf(\"%.2f\\n\", a[i]);\n}\nreturn 1;\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Number</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">books:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(n<span class=\"cm-highlightSpace\"> </span>&lt;=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Invalid</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">number</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">books</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">float</span><span class=\"cm-highlightSpace\"> </span>a[n];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Book</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">price:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,i+<span class=\"\u037cd\">1</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%f\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>-<span class=\"\u037cd\">1</span><span class=\"cm-highlightSpace\"> </span>;i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span><span class=\"cm-highlightSpace\"> </span>;j++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[j]<span class=\"cm-highlightSpace\"> </span>&gt;<span class=\"cm-highlightSpace\"> </span>a[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>]){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">float</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>=temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Sorted</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">list</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">book</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">prices:</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%.2f</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/6799edfcff8c0a15997e3777/6565da7afaa7080c299392be",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include <stdio.h>\n\nint main() {\nint n;\nprintf(\"Number of books: \");\nscanf(\"%d\", &n);\n\nif (n <= 0) {\nprintf(\"Invalid number of books\\n\");\nreturn 0;\n}\n\nfloat books[n];\nfor (int i = 0; i < n; i++) {\nprintf(\"Book %d price: \", i + 1);\nscanf(\"%f\", &books[i]);\n}\nfor (int i = 0; i < n - 1; i++) {\nfor (int j = 0; j < n - i - 1; j++) {\nif (books[j] > books[j + 1]) {\nfloat temp = books[j];\nbooks[j] = books[j + 1];\nbooks[j + 1] = temp;\n}\n}\n}\n\nprintf(\"Sorted list of book prices:\\n\");\nfor (int i = 0; i < n; i++) {\nprintf(\"%.2f\\n\", books[i]);\n}\n\nreturn 0;\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"Number</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">books:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;n);</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(n<span class=\"cm-highlightSpace\"> </span>&lt;=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"Invalid</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">number</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">books</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">float</span><span class=\"cm-highlightSpace\"> </span>books[n];</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"Book</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">price:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>scanf(<span class=\"\u037ce\">\"%f\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;books[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>;<span class=\"cm-highlightSpace\"> </span>j++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(books[j]<span class=\"cm-highlightSpace\"> </span>&gt;<span class=\"cm-highlightSpace\"> </span>books[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>])<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">float</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>books[j];</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>books[j]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>books[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>books[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"Sorted</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">list</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">of</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">book</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">prices:</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"%.2f</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>books[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><br></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4766fe58e11c319e1f94/6799edfcff8c0a15997e3777/6582c2856a331d42f5a191ff",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\nint main (){\nint n;\nscanf(\"%d\",&n);\nif(n <= 0){\nprintf(\"Invalid number\\n\");\nreturn 0;\n}\nint a[n];\nfor(int i = 0 ; i < n;i ++ ) {\nscanf(\"%d\", &a[i]);\n}\nprintf(\"Original Quantities: \");\nfor(int i = 0 ; i < n;i ++ ) {\nprintf(\"%d \", a[i]);\n}printf(\"\\n\");\nfor(int i = 0 ; i < n ; i++) {\nfor(int j = 0 ; j< n - i - 1 ; j++) {\nif(a[j] > a[j + 1]) {\nint temp = a[j];\na[j] = a[j + 1];\na[j + 1] = temp;\n}\n}\n}\n\n\nprintf(\"Sorted Quantities: \");\nfor(int i = 0 ; i < n;i ++ ) {\nprintf(\"%d \", a[i]);\n}printf(\"\\n\");\nreturn 1;\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span><span class=\"cm-highlightSpace\"> </span>(){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;n);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(n<span class=\"cm-highlightSpace\"> </span>&lt;=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Invalid</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">number</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>a[n];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n;i<span class=\"cm-highlightSpace\"> </span>++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Original</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">Quantities:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n;i<span class=\"cm-highlightSpace\"> </span>++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>j&lt;<span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>j++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(a[j]<span class=\"cm-highlightSpace\"> </span>&gt;<span class=\"cm-highlightSpace\"> </span>a[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>])<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>a[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>];</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>a[j<span class=\"cm-highlightSpace\"> </span>+<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>]<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Sorted</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">Quantities:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>n;i<span class=\"cm-highlightSpace\"> </span>++<span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>a[i]);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53cefe58e11c319e32bd/5b196047015de975e8ef5565",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            false,
            true,
            true,
            false
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53cefe58e11c319e32bd/58bf96c10cf26ce633b5b481",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            true,
            false,
            true,
            true
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53cefe58e11c319e32bd/58bff78c0cf26ce633b5eb50",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node *next;\n};\ntypedef struct node *NODE;\n\nNODE createNode() {\nNODE new;\nnew=(NODE) malloc(sizeof(struct node));\nnew->next=NULL;\nreturn new;\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span>};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNode</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>NODE<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">new</span>=(NODE)<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">malloc</span>(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">new</span>-&gt;next=<span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53cefe58e11c319e32bd/58be7ffd0cf26ce633b573be",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node * next;\n};\ntypedef struct node *NODE;\n\n\nNODE createNode(int x){\nNODE temp = (NODE)malloc(sizeof(struct node));\ntemp -> next = NULL;\ntemp -> data = x;\nreturn temp;\n}\n\nNODE addNodes(NODE first, int x) {\nNODE newNode = createNode(x);\nif (!first) return newNode;\n\nNODE temp = first;\nwhile (first -> next != NULL) {\nfirst = first -> next;\n}\nfirst -> next = newNode;\nreturn temp;\n}\n\nvoid traverseList(NODE temp) {\nwhile (temp != NULL) {\nprintf(\"%d --> \", temp->data);\ntemp = temp->next;\n}\nprintf(\"NULL\\n\");\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNode</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x){</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">addNodes</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>newNode<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>createNode(x);</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(!first)<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>newNode;<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(first<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>first<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>first<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>newNode;<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">traverseList</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(temp<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">--&gt;</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>temp-&gt;data);</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp-&gt;next;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"NULL</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53cefe58e11c319e32bd/58c0f50d0cf26ce633b60fd6",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node *next;\n};\ntypedef struct node *NODE;\n\nNODE createNode(int x) {\nNODE temp = (NODE)malloc ( sizeof( struct node));\ntemp -> next = NULL;\ntemp -> data = x;\nreturn temp;\n}\n\nNODE insertAtBegin(NODE first, int x) {\nNODE NewNode = createNode(x);\nNewNode -> next = first;\nreturn NewNode;\n}\n\nint count(NODE first) {\nint n = 0;\nif(first == NULL) return 0;\nNODE temp = first;\nwhile(temp != NULL) {\nn++;\ntemp = temp -> next;\n}\nreturn n;\n}\n\nvoid traverseList(NODE temp) {\nwhile (temp != NULL) {\nprintf(\"%d --> \",temp -> data);\ntemp = temp -> next;",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNode</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)malloc<span class=\"cm-highlightSpace\"> </span>(<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">sizeof</span>(<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">insertAtBegin</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>NewNode<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>createNode(x);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>NewNode<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>NewNode;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">count</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>n<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(first<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(temp<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>n++;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>n;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">traverseList</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(temp<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">--&gt;</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-gap\" style=\"height: 67.2px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53cefe58e11c319e32bd/58c15a190cf26ce633b6452e",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node *next;\n};\ntypedef struct node *NODE;\n\nNODE createNode(int x) {\nNODE temp;\ntemp = (NODE) malloc(sizeof(struct node));\ntemp -> next = NULL;\ntemp -> data = x;\nreturn temp;\n}\n\nNODE insertAtEnd(NODE first, int x) {\nNODE nn = createNode(x);\nif(!first) return nn;\nNODE temp = first;\nwhile(temp -> next)temp = temp->next;\ntemp -> next = nn;\nreturn first;\n}\n\nvoid traverseList(NODE first) {\nNODE temp = first;\nwhile (temp != NULL) {\nprintf(\"%d --> \",temp -> data);\ntemp = temp -> next;\n}\nprintf(\"NULL\\n\");\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNode</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)<span class=\"cm-highlightSpace\"> </span>malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">insertAtEnd</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>nn<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>createNode(x);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(!first)<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>nn;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next)temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp-&gt;next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>nn;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">traverseList</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(temp<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">--&gt;</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"NULL</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53cefe58e11c319e32bd/58c1630c0cf26ce633b64a7c",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node *next;\n};\ntypedef struct node *NODE;\n\nNODE createNode(int x) {\nNODE temp = (NODE) malloc(sizeof(struct node));\ntemp->data = x;\ntemp->next = NULL;\nreturn temp;\n}\n\nNODE insertAtPosition(NODE first, int pos, int x) {\nNODE temp = createNode(x);\nif (pos == 1) {\ntemp->next = first;\nreturn temp;\n}\nNODE prev = first;\nfor (int i = 1; i < pos - 1 ; i++) {\nif(prev == NULL) {printf(\"No such position in SLL so insertion is not possible\\n\");\nreturn first;}\nelse prev = prev->next;\n}\ntemp->next = prev->next;\nprev->next = temp;\nreturn first;\n}\n\nvoid traverseList(NODE first) {\nNODE temp = first;\nwhile (temp != NULL) {\nprintf(\"%d --> \", temp->data);\ntemp = temp->next;\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNode</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)<span class=\"cm-highlightSpace\"> </span>malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp-&gt;data<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">insertAtPosition</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>pos,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>createNode(x);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(pos<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;<span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>prev<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>pos<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span><span class=\"cm-highlightSpace\"> </span>;<span class=\"cm-highlightSpace\"> </span>i++)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(prev<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{printf(<span class=\"\u037ce\">\"No</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">such</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">position</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">SLL</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">so</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">insertion</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">is</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">not</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">possible</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>first;}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">else</span><span class=\"cm-highlightSpace\"> </span>prev<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>prev-&gt;next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>prev-&gt;next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>prev-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">traverseList</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(temp<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">--&gt;</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>temp-&gt;data);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp-&gt;next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-gap\" style=\"height: 44.8px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53cefe58e11c319e32bd/5b41ffd364bac16d4033d579",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node *next;\n};\ntypedef struct node *NODE;\n\nNODE createAndAddNodes(NODE first) {\nNODE temp = first;\nwhile(1) {\nNODE new = (NODE) malloc(sizeof(struct node));\nnew -> next = NULL;\nprintf(\"Enter element : \");\nscanf(\"%d\",&new -> data);\nif(new -> data == -1){\nreturn first;\n}\nif(!first){\nfirst = new;\ntemp = new;}\nelse {\ntemp -> next = new;\ntemp = temp ->next;}\n}\n}\n\nNODE concatenate(NODE t1, NODE t2) {\nif(t1 == NULL)return t2;\nNODE temp = t1;\nwhile(temp -> next)temp = temp -> next;\ntemp -> next = t2;\nreturn t1;\n}\n\nvoid print(NODE first) {\nNODE q = first;\nif (first == NULL) {\nprintf(\"Single Linked List is empty\\n\");\n} else {\nwhile (q != NULL) {\nprintf(\"%d---> \", q->data);\nq = q->next;\n}\nprintf(\"NULL\\n\");\n}\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createAndAddNodes</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">while</span>(<span class=\"\u037cd\">1</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>NODE<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(NODE)<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">malloc</span>(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;<span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span>(<span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span>-<span class=\"\u037cd\">1</span>){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(!first){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>first<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">else</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;next;}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">concatenate</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>t1,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>t2)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(t1<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>t2;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>t1;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next)temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>t2;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>t1;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">print</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>q<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(first<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Single</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">Linked</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">List</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">is</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">empty</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">else</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(q<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d---&gt;</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>q-&gt;data);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>q<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>q-&gt;next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"NULL</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53cefe58e11c319e32bd/5b42086e64bac16d4033d697",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node *next;\n};\ntypedef struct node *NODE;\n\n\nNODE createNode(int x) {\nNODE temp = (NODE) malloc(sizeof(struct node));\ntemp->data = x;\ntemp->next = NULL;\nreturn temp;\n}\nint s(NODE first, int x) {\nwhile (first) {\nif (first->data == x) return 1;\nfirst = first->next;\n}\nreturn 0;\n}\n\nNODE createAndAddNodes(NODE first) {\nNODE temp, q = first;\nint x;\nprintf(\"Enter element : \");\nscanf(\"%d\", &x);\nwhile(x != -1) {\ntemp = (NODE)malloc(sizeof(struct node));\ntemp->data = x;\ntemp->next = NULL;\nif(first == NULL) {\nfirst = temp;\n} else {\nq->next = temp;\n}\nq = temp;",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNode</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)<span class=\"cm-highlightSpace\"> </span>malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp-&gt;data<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">s</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(first-&gt;data<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>first<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first-&gt;next;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createAndAddNodes</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp,<span class=\"cm-highlightSpace\"> </span>q<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;x);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(x<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span>-<span class=\"\u037cd\">1</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp-&gt;data<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(first<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>first<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">else</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>q-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>q<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-gap\" style=\"height: 1209.6px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53cefe58e11c319e32bd/5b420dc264bac16d4033d77b",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node *next;\n};\ntypedef struct node * NODE;\n\nNODE createAndAddNodes(NODE first) {\nNODE temp, q;\nint x;\nprintf(\"Enter element : \");\nscanf(\"%d\", &x);\nwhile(x != -1) {\ntemp = (NODE)malloc(sizeof(struct node));\ntemp->data = x;\ntemp->next = NULL;\nif(first == NULL) {\nfirst = temp;\n} else {\nq->next = temp;\n}\nq = temp;\nprintf(\"Enter element : \");\nscanf(\"%d\", &x);\n}\nreturn first;\n}\n\nNODE sort(NODE first) {\nif (!first || !first->next) return first;\nNODE i, j;\nint temp;\nfor (i = first; i->next; i = i->next) {\nfor (j = first; j->next; j = j->next) {\nif (j->data > j->next->data) {",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createAndAddNodes</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp,<span class=\"cm-highlightSpace\"> </span>q;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;x);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(x<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span>-<span class=\"\u037cd\">1</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp-&gt;data<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(first<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>first<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">else</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>q-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>q<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;x);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>first;<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">sort</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(!first<span class=\"cm-highlightSpace\"> </span>||<span class=\"cm-highlightSpace\"> </span>!first-&gt;next)<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>first;<span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>i,<span class=\"cm-highlightSpace\"> </span>j;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;<span class=\"cm-highlightSpace\"> </span>i-&gt;next;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>i-&gt;next)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;<span class=\"cm-highlightSpace\"> </span>j-&gt;next;<span class=\"cm-highlightSpace\"> </span>j<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>j-&gt;next)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(j-&gt;data<span class=\"cm-highlightSpace\"> </span>&gt;<span class=\"cm-highlightSpace\"> </span>j-&gt;next-&gt;data)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-gap\" style=\"height: 1187.2px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53d9fe58e11c319e32c9/5b38f79518b23e5a6edea38a",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            true,
            false,
            false,
            true,
            true
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53d9fe58e11c319e32c9/5b39788218b23e5a6edea6c0",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node *prev;\nstruct node *next;\n};\ntypedef struct node * NODE;\n\nNODE createNodeInDLL() {\nNODE new = (NODE)malloc(sizeof(struct node));\nnew -> next = NULL;\nnew -> prev = NULL;\nreturn new;\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*prev;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNodeInDLL</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>NODE<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(NODE)<span class=\"\u037ci\">malloc</span>(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>prev<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53d9fe58e11c319e32c9/5b39801318b23e5a6edea6e3",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node *prev;\nstruct node *next;\n};\ntypedef struct node * NODE;\n\nNODE createNodeInDLL(int x) {\nNODE temp;\ntemp = (NODE)malloc(sizeof(struct node));\ntemp -> data = x;\ntemp->prev = NULL;\ntemp->next = NULL;\nreturn temp;\n}\n\nNODE insertAtEndInDLL(NODE first, int x) {\nNODE new = createNodeInDLL(x);\nif(!first)return new;\nNODE temp = first;\nwhile(temp -> next){\ntemp = temp -> next;\n}\ntemp -> next = new;\nreturn first;\n}\n\nvoid traverseListInDLL(NODE first) {\nwhile(first){\nprintf(\"%d <--> \",first->data);\nfirst= first->next;\n}\nprintf(\"NULL\\n\")\n;}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*prev;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNodeInDLL</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp-&gt;prev<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">insertAtEndInDLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>NODE<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">createNodeInDLL</span>(x);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(!first)<span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">traverseListInDLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(first){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">&lt;--&gt;</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,first-&gt;data);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>first=<span class=\"cm-highlightSpace\"> </span>first-&gt;next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"NULL</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>)</div><div class=\"cm-line\">;}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53d9fe58e11c319e32c9/5b3984a518b23e5a6edea6ea",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node *prev;\nstruct node *next;\n};\ntypedef struct node * NODE;\n\nNODE createNodeInDLL(int x) {\nNODE temp;\ntemp = (NODE)malloc(sizeof(struct node));\ntemp -> prev = NULL;\ntemp -> next = NULL;\ntemp -> data = x;\nreturn temp;\n}\n\nint countInDLL(NODE first) {\nNODE temp = first;\nint count = 0;\nwhile(temp){\ncount++;\ntemp = temp ->next;\n}\nreturn count;\n}\n\nNODE insertAtBeginInDLL(NODE first, int x) {\nNODE new = createNodeInDLL(x);\nfirst ->prev = new;\nnew -> next = first;\nreturn new;\n}\n\nvoid traverseListInDLL(NODE first) {\nNODE lastNode = first;\nwhile (lastNode != NULL) {\nprintf(\"%d <--> \", lastNode -> data);\nlastNode = lastNode -> next;\n}\nprintf(\"NULL\\n\");\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*prev;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNodeInDLL</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>prev<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">countInDLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>count<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(temp){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>count++;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>count;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">insertAtBeginInDLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>NODE<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">createNodeInDLL</span>(x);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>first<span class=\"cm-highlightSpace\"> </span>-&gt;prev<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">traverseListInDLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>lastNode<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(lastNode<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">&lt;--&gt;</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>lastNode<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>lastNode<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>lastNode<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"NULL</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53d9fe58e11c319e32c9/5b3987ff18b23e5a6edea703",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node *prev;\nstruct node *next;\n};\ntypedef struct node * NODE;\n\nNODE createNodeInDLL() {\nNODE temp;\ntemp = (NODE)malloc(sizeof(struct node));\ntemp->prev = NULL;\ntemp->next = NULL;\nreturn temp;\n}\n\nNODE insertAtPositionInDLL(NODE first, int position, int x) {\nNODE temp = createNodeInDLL();\ntemp->data = x;\nif (position == 1) {\ntemp->next = first;\nif (first != NULL) first->prev = temp;\nreturn temp;\n}\nNODE current = first;\nint count = 1;\nwhile (current != NULL && count < position - 1) {\ncurrent = current->next;\ncount++;\n}\n\nif (current == NULL) {\nprintf(\"No such position in DLL so insertion is not possible\\n\");\nreturn first;\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*prev;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNodeInDLL</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp-&gt;prev<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">insertAtPositionInDLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>position,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>createNodeInDLL();</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp-&gt;data<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(position<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(first<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>first-&gt;prev<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>current<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>count<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(current<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span><span class=\"cm-highlightSpace\"> </span>&amp;&amp;<span class=\"cm-highlightSpace\"> </span>count<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>position<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>current<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>current-&gt;next;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>count++;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(current<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"No</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">such</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">position</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">DLL</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">so</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">insertion</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">is</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">not</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">possible</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-gap\" style=\"height: 470.4px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53d9fe58e11c319e32c9/5b41a38c64bac16d40978d26",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node *prev;\nstruct node *next;\n};\ntypedef struct node * NODE;\n\nNODE createNodeInDLL(int x) {\nNODE temp;\ntemp = (NODE)malloc(sizeof(struct node));\ntemp -> prev = NULL;\ntemp -> next = NULL;\ntemp -> data = x;\nreturn temp;\n}\n\nNODE insertAtBeginInDLL(NODE first, int x) {\nNODE new = createNodeInDLL(x);\nif(!first) return new;\nnew -> next = first;\nfirst -> prev = new;\nreturn new;\n}\n\nNODE deleteAtBeginInDLL(NODE first) {\nprintf(\"The deleted element from DLL : %d\\n\",first -> data);\nfirst = first -> next;\nfirst -> prev = NULL;\nreturn first;\n}\n\nvoid traverseListInDLL(NODE first) {\nNODE lastNode = first;\nwhile (lastNode != NULL) {",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*prev;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNodeInDLL</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>prev<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">insertAtBeginInDLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>NODE<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">createNodeInDLL</span>(x);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(!first)<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>first<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>prev<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">deleteAtBeginInDLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">deleted</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">from</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">DLL</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,first<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>first<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>first<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>prev<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">traverseListInDLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>lastNode<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(lastNode<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-gap\" style=\"height: 134.4px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53d9fe58e11c319e32c9/5b41adf164bac16d40978e6c",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node *prev;\nstruct node *next;\n};\ntypedef struct node * NODE;\n\nNODE createNodeInDLL() {\nNODE temp;\ntemp = (NODE)malloc(sizeof(struct node));\ntemp->prev = NULL;\ntemp->next = NULL;\nreturn temp;\n}\n\nNODE insertAtEndInDLL(NODE first, int x) {\nNODE temp, lastNode = first;\ntemp = createNodeInDLL();\ntemp -> data = x;\nif (first == NULL) {\nfirst = temp;\n} else {\nwhile (lastNode -> next != NULL) {\nlastNode = lastNode -> next;\n}\nlastNode -> next = temp;\ntemp -> prev = lastNode;\n}\nreturn first;\n}\n\nNODE deleteAtEndInDLL(NODE first) {\nif (!first -> next){\nprintf(\"The deleted element from DLL : %d\\n\",first -> data);\nreturn NULL;\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*prev;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNodeInDLL</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp-&gt;prev<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">insertAtEndInDLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp,<span class=\"cm-highlightSpace\"> </span>lastNode<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>createNodeInDLL();</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(first<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>first<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">else</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(lastNode<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>lastNode<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>lastNode<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>lastNode<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>prev<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>lastNode;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">deleteAtEndInDLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(!first<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">deleted</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">from</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">DLL</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,first<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-gap\" style=\"height: 448px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53d9fe58e11c319e32c9/5b41b6d264bac16d4097914c",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node *prev;\nstruct node *next;\n};\ntypedef struct node * NODE;\n\nNODE createNodeInDLL(int x) {\nNODE temp = (NODE)malloc(sizeof(struct node));\ntemp->prev = NULL;\ntemp->next = NULL;\ntemp->data = x;\nreturn temp;\n}\n\nvoid traverseListInDLL(NODE first) {\nNODE temp = first;\nwhile (temp) {\nprintf(\"%d <--> \", temp->data);\ntemp = temp->next;\n}\nprintf(\"NULL\\n\");\n}\n\nNODE insertAtEndInDLL(NODE first, int x) {\nNODE new = createNodeInDLL(x);\nif (!first) return new;\nNODE temp = first;\nwhile (temp->next) {\ntemp = temp->next;\n}\nnew->prev = temp;\ntemp->next = new;\nreturn first;\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*prev;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNodeInDLL</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp-&gt;prev<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp-&gt;data<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">traverseListInDLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(temp)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">&lt;--&gt;</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>temp-&gt;data);</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp-&gt;next;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"NULL</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">insertAtEndInDLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>NODE<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">createNodeInDLL</span>(x);</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(!first)<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(temp-&gt;next)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp-&gt;next;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>-&gt;prev<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\">}</div><div class=\"cm-gap\" style=\"height: 963.2px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53d9fe58e11c319e32c9/5b41bb5c64bac16d409791f4",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node *prev;\nstruct node *next;\n};\n\ntypedef struct node * NODE;\n\nNODE createNodeInDLL(int x) {\nNODE temp;\ntemp = (NODE)malloc(sizeof(struct node));\ntemp->prev = NULL;\ntemp->next = NULL;\ntemp->data = x;\nreturn temp;\n}\n\nvoid traverseListInDLL(NODE first) {\nNODE lastNode = first;\nwhile (lastNode != NULL) {\nprintf(\"%d <--> \", lastNode -> data);\nlastNode = lastNode -> next;\n}\nprintf(\"NULL\\n\");\n}\n\nNODE insertAtBeginInDLL(NODE first, int x) {\nNODE new = createNodeInDLL(x);\nif(!first)return new;\nnew -> next = first;\nfirst -> prev = new;\nreturn new;\n}\nint searchPosOfEleInDLL(NODE first, int element) {",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*prev;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNodeInDLL</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp-&gt;prev<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp-&gt;data<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">traverseListInDLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>lastNode<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(lastNode<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">&lt;--&gt;</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>lastNode<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>lastNode<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>lastNode<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"NULL</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">insertAtBeginInDLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>NODE<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">createNodeInDLL</span>(x);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(!first)<span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>first<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>prev<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\">}</div><div class=\"cm-line\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">searchPosOfEleInDLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>element)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-gap\" style=\"height: 246.4px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53e8fe58e11c319e32df/5b310ced64bac16d40d75d51",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            true,
            true,
            false
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53e8fe58e11c319e32df/5b310dde64bac16d40d75d67",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node * next;\n};\ntypedef struct node * NODE;\n\nNODE createNodeInCLL() {\nNODE temp = (NODE)malloc(sizeof(struct node));\nreturn temp;\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNodeInCLL</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53e8fe58e11c319e32df/5b31185764bac16d40d75e70",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node *next;\n};\ntypedef struct node *NODE;\n\nNODE createNodeInCLL() {\nNODE temp;\ntemp = (NODE) malloc(sizeof(struct node));\ntemp -> next = NULL;\nreturn temp;\n}\n\nNODE addNodesInCLL(NODE first, int x) {\nNODE new = createNodeInCLL();\nnew -> data = x;\nif (!first){\nnew -> next = new;\nreturn new;}\n\nNODE temp = first;\nwhile (temp->next != first)\ntemp = temp->next;\n\ntemp->next = new;\nnew->next = first;\nreturn first;\n}\n\nvoid traverseListInCLL(NODE first) {\nNODE temp = first;\ndo{\nprintf(\"%d --> \",temp -> data);\ntemp = temp -> next;\n}while(temp != first);",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">};</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"\u037ci\">NODE</span>;</span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNodeInCLL</span>()<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)<span class=\"cm-highlightSpace\"> </span>malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">}</span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">addNodesInCLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>NODE<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">createNodeInCLL</span>();</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(!first){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(temp-&gt;next<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp-&gt;next;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;<span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;<span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">}</span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">traverseListInCLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">do</span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">--&gt;</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}<span class=\"\u037cb\">while</span>(temp<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span>first);</div><div class=\"cm-gap\" style=\"height: 44.8px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53e8fe58e11c319e32df/5b326f4a64bac16d40e8eb89",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node *next;\n};\ntypedef struct node *NODE;\n\nNODE createNodeInCLL(int x) {\nNODE temp;\ntemp = (NODE) malloc(sizeof(struct node));\ntemp -> next = NULL;\ntemp -> data = x;\nreturn temp;\n}\n\nNODE insertAtBeginInCLL(NODE first, int x) {\nNODE new = createNodeInCLL(x);\nif(!first){\nnew -> next = new;\nreturn new;\n}\nNODE temp = first;\nwhile(temp -> next != first){\ntemp = temp -> next;\n}\ntemp -> next = new;\nnew -> next = first;\nreturn new;\n}\n\nint countInCLL(NODE first) {\nint count = 0;\nNODE temp = first;\nif(first)count++;\nwhile(temp -> next !=first){\ncount++;\ntemp = temp -> next;\n}return count;\n}\n\nvoid traverseListInCLL(NODE first) {\nNODE temp = first;\ndo {\nprintf(\"%d --> \", temp -> data);\ntemp = temp -> next;\n} while (temp != first);\nprintf(\"\\n\");\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNodeInCLL</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)<span class=\"cm-highlightSpace\"> </span>malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">insertAtBeginInCLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>NODE<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">createNodeInCLL</span>(x);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(!first){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span>first){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">countInCLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>count<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(first)count++;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>!=first){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>count++;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}<span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>count;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">traverseListInCLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">do</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">--&gt;</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(temp<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span>first);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53e8fe58e11c319e32df/5b33c66b64bac16d40e94b89",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node *next;\n};\ntypedef struct node *NODE;\n\nNODE createNodeInCLL() {\nNODE temp;\ntemp = (NODE) malloc(sizeof(struct node));\ntemp -> next = NULL;\nreturn temp;\n}\n\nNODE insertAtPositionInCLL(NODE first, int pos, int x) {\nNODE new = createNodeInCLL();\nnew -> data = x;\nnew -> next = new;\nint done =1;\nif (!first) return (pos == 1) ? new : first;\n\nif (pos == 1) {\nNODE temp = first;\nwhile (temp->next != first) temp = temp->next;\ntemp->next = new;\nnew->next = first;\ndone=1;\nreturn new;\n}\nNODE temp = first;\nfor (int i = 1; i < pos - 1 && temp->next != first; i++)\ntemp = temp->next;\nif (temp->next == first && pos != 2) {\nprintf(\"No such position in CLL so insertion is not possible\\n\");\nreturn first;}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">};</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"\u037ci\">NODE</span>;</span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNodeInCLL</span>()<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)<span class=\"cm-highlightSpace\"> </span>malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">}</span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">insertAtPositionInCLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>pos,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>NODE<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">createNodeInCLL</span>();</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>done<span class=\"cm-highlightSpace\"> </span>=<span class=\"\u037cd\">1</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(!first)<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>(pos<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>)<span class=\"cm-highlightSpace\"> </span>?<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>:<span class=\"cm-highlightSpace\"> </span>first;<span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(pos<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(temp-&gt;next<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp-&gt;next;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>done=<span class=\"\u037cd\">1</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">for</span><span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>;<span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>&lt;<span class=\"cm-highlightSpace\"> </span>pos<span class=\"cm-highlightSpace\"> </span>-<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span><span class=\"cm-highlightSpace\"> </span>&amp;&amp;<span class=\"cm-highlightSpace\"> </span>temp-&gt;next<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span>first;<span class=\"cm-highlightSpace\"> </span>i++)</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp-&gt;next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(temp-&gt;next<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span>first<span class=\"cm-highlightSpace\"> </span>&amp;&amp;<span class=\"cm-highlightSpace\"> </span>pos<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">2</span>)<span class=\"cm-highlightSpace\"> </span>{<span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"No</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">such</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">position</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">CLL</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">so</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">insertion</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">is</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">not</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">possible</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>first;}</div><div class=\"cm-line\"><br></div><div class=\"cm-gap\" style=\"height: 336px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53e8fe58e11c319e32df/5b36f43018b23e5a6ede6b4b",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node *next;\n};\ntypedef struct node *NODE;\n\nNODE createNodeInCLL(int x) {\nNODE temp;\ntemp = (NODE) malloc(sizeof(struct node));\ntemp -> next = temp;\ntemp -> data = x;\nreturn temp;\n}\n\nNODE insertAtBeginInCLL(NODE first, int x) {\nNODE new = createNodeInCLL(x);\nif(!first)return new;\nNODE curr = first;\nwhile(curr -> next != first)curr = curr -> next;\ncurr -> next = new;\nnew -> next = first;\nreturn new;\n}\n\nNODE deleteAtBeginInCLL(NODE first) {\nif(!first)return NULL;\nif(first == first -> next){\nprintf(\"The deleted element from CLL : %d\\n\",first -> data);\nreturn NULL;}\nNODE curr = first;\nwhile(curr -> next != first)curr = curr -> next;\ncurr -> next = first -> next;\nprintf(\"The deleted element from CLL : %d\\n\",first -> data);\nreturn curr -> next;\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNodeInCLL</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)<span class=\"cm-highlightSpace\"> </span>malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">insertAtBeginInCLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>NODE<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">createNodeInCLL</span>(x);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(!first)<span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>curr<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;<span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(curr<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span>first)curr<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>curr<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>curr<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">deleteAtBeginInCLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(!first)<span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(first<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span>first<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">deleted</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">from</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">CLL</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,first<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>curr<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(curr<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span>first)curr<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>curr<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>curr<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">deleted</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">from</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">CLL</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,first<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>curr<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-gap\" style=\"height: 201.6px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53e8fe58e11c319e32df/5b36f80c18b23e5a6ede6bbb",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct node {\nint data;\nstruct node *next;\n};\n\ntypedef struct node *NODE;\n\nNODE createNodeInCLL() {\nNODE temp;\ntemp = (NODE)malloc(sizeof(struct node));\ntemp->next = NULL;\nreturn temp;\n}\n\nNODE insertAtEndInCLL(NODE first, int x) {\nNODE temp = createNodeInCLL();\ntemp->data = x;\n\nif (first == NULL) {\ntemp->next = temp;\nreturn temp;\n}\n\nNODE curr = first;\nwhile (curr->next != first) {\ncurr = curr->next;\n}\n\ncurr->next = temp;\ntemp->next = first;\nreturn first;\n}\n\nNODE deleteAtEndInCLL(NODE first) {\nif (first == NULL) {\nreturn NULL;\n}\n\nNODE temp = first, prev = NULL;\n\nif (first->next == first) {\nprintf(\"The deleted item from CLL : %d\\n\",first -> data);\nreturn NULL;\n}\n\nwhile (temp->next != first) {\nprev = temp;\ntemp = temp->next;\n}\nprintf(\"The deleted item from CLL : %d\\n\",temp -> data);\nprev->next = first;",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037c5\">#include</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></div><div class=\"cm-line\"><span class=\"\u037c5\">#include</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cf\">&lt;stdlib.h&gt;</span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNodeInCLL</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">insertAtEndInCLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>createNodeInCLL();</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp-&gt;data<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(first<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>curr<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(curr-&gt;next<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>curr<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>curr-&gt;next;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>curr-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">deleteAtEndInCLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(first<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span>prev<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(first-&gt;next<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">deleted</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">item</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">from</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">CLL</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,first<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data);</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(temp-&gt;next<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>prev<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp-&gt;next;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">deleted</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">item</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">from</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">CLL</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data);</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>prev-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-gap\" style=\"height: 403.2px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53e8fe58e11c319e32df/5b38e27818b23e5a6edea171",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node *next;\n};\ntypedef struct node *NODE;\nNODE createNodeInCLL() {\nNODE temp;\ntemp = (NODE) malloc(sizeof(struct node));\ntemp -> next = NULL;\nreturn temp;\n}\nNODE insertAtEndInCLL(NODE first, int x) {\nNODE temp = createNodeInCLL();\ntemp -> data = x;\nif (first == NULL) {\ntemp -> next = temp;\nreturn temp;\n}\nNODE curr = first;\nwhile (curr -> next != first) {\ncurr = curr -> next;\n}\ncurr -> next = temp;\ntemp -> next = first;\nreturn first;\n}\n\n\nNODE deleteAtPositionInCLL(NODE first, int pos) {\nif (first == NULL) {\nprintf(\"List is empty!\\n\");\nreturn NULL;\n}\n\nNODE temp = first;",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNodeInCLL</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)<span class=\"cm-highlightSpace\"> </span>malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">insertAtEndInCLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>createNodeInCLL();</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(first<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>curr<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(curr<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>curr<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>curr<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>curr<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">deleteAtPositionInCLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>pos)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(first<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"List</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">is</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">empty!</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><br></div><div class=\"cm-gap\" style=\"height: 1075.2px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f53e8fe58e11c319e32df/5b38e6f218b23e5a6edea1ed",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct node {\nint data;\nstruct node *next;\n};\ntypedef struct node *NODE;\n\nNODE createNodeInCLL() {\nNODE temp;\ntemp = (NODE) malloc(sizeof(struct node));\ntemp -> next = NULL;\nreturn temp;\n}\n\nNODE insertAtBeginInCLL(NODE first, int x) {\n}\n\nint searchPosOfEleInCLL(NODE first, int key) {\n}\n\nvoid traverseListInCLL(NODE first) {\nNODE temp = first;\ndo {\nprintf(\"%d --> \", temp -> data);\ntemp = temp -> next;\n} while (temp != first);\nprintf(\"\\n\");\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNodeInCLL</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)<span class=\"cm-highlightSpace\"> </span>malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">insertAtBeginInCLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">searchPosOfEleInCLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>key)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">traverseListInCLL</span>(<span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>first;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">do</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">--&gt;</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>data);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">while</span><span class=\"cm-highlightSpace\"> </span>(temp<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span>first);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f540afe58e11c319e335a/650ad165337d8e06cf0dc472",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct node {\nint value;\nstruct node *next;\n};\ntypedef struct node* NODE;\nNODE create(int x){\nNODE temp = (NODE) malloc(sizeof(struct node));\ntemp -> next = NULL;\ntemp -> value = x;\nreturn temp;\n}\nNODE head = NULL;\nvoid insert(){\nint x;\nprintf(\"Element : \");\nscanf(\"%d\",&x);\nNODE new = create(x);\nif(!head) head = new;\nNODE curr = head;\nwhile(curr -> next)curr = curr -> next;\ncurr -> next = new;\n}\nvoid delete_node(){\nif(head == NULL)printf(\"List is empty. Cannot delete.\\n\");\nint pos;\nprintf(\"Position : \");\nscanf(\"%d\",&pos);\nNODE temp = head;\nfor(int i = pos;pos > 2;pos--){\nif(!temp){\nprintf(\"Invalid Position\\n\");\n}\ntemp = temp -> next;",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037c5\">#include</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037c5\">#include</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cf\">&lt;stdlib.h&gt;</span></span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>value;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">};</span></div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>*<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">NODE</span>;</div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">create</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)<span class=\"cm-highlightSpace\"> </span>malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>value<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>temp;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>head<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">insert</span>(){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;x);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>NODE<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span><span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">create</span>(x);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(!head)<span class=\"cm-highlightSpace\"> </span>head<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;<span class=\"cm-highlightSpace\"> </span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>curr<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>head;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(curr<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next)curr<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>curr<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>curr<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">new</span>;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">delete_node</span>(){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(head<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)printf(<span class=\"\u037ce\">\"List</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">is</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">empty.</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">Cannot</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">delete.</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>pos;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Position</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,&amp;pos);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>head;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">for</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>i<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>pos;pos<span class=\"cm-highlightSpace\"> </span>&gt;<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">2</span>;pos--){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span>(!temp){</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Invalid</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">Position</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-gap\" style=\"height: 1500.8px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f540afe58e11c319e335a/63edf314308a3806e97f251d",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "// Type Content here...\n\n\n\n\nvoid main() {\nNODE first = NULL;\nint x, pos, op;\nwhile(1) {\nprintf(\"1.Insert At Begin\\n2.Delete at Begin\\n3.Search an element Position\\n4.Traverse the List\\n5.Exit\\n\");\nprintf(\"Enter your option : \");\nscanf(\"%d\", &op);\nswitch(op) {\ncase 1: printf(\"Enter an element: \");\nscanf(\"%d\", &x);\nfirst = insertAtBeginInDLL(first, x);\nbreak;\ncase 2:\nif (first == NULL) {\nprintf(\"Double Linked List is empty so deletion is not possible\\n\");\n} else {\nfirst = deleteAtBeginInDLL(first);\n}\nbreak;\ncase 3:\nprintf(\"Enter search element: \");\nscanf(\"%d\", &x);\npos = searchPosOfEleInDLL(first, x);\nif (pos == 0) {\nprintf(\"The given element %d is not found in the given DLL\\n\", x);\n} else {\nprintf(\"The given element %d is found at position : %d\\n\", x, pos);\n}\nbreak;\ncase 4:\nif (first == NULL) {",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Type</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Content</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">here...</span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x,<span class=\"cm-highlightSpace\"> </span>pos,<span class=\"cm-highlightSpace\"> </span>op;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(<span class=\"\u037cd\">1</span>)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"1.Insert</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">At</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">Begin</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">2.Delete</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">at</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">Begin</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">3.Search</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">an</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">Position</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">4.Traverse</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">List</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">5.Exit</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">your</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">option</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;op);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">switch</span>(op)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">case</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>:<span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">an</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;x);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>first<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>insertAtBeginInDLL(first,<span class=\"cm-highlightSpace\"> </span>x);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">break</span>;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">case</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">2</span>:<span class=\"cm-highlightTab\">\t</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(first<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Double</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">Linked</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">List</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">is</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">empty</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">so</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">deletion</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">is</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">not</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">possible</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">else</span><span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>first<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>deleteAtBeginInDLL(first);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">break</span>;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">case</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">3</span>:<span class=\"cm-highlightTab\">\t</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Enter</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">search</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;x);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>pos<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>searchPosOfEleInDLL(first,<span class=\"cm-highlightSpace\"> </span>x);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(pos<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">0</span>)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">given</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">is</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">not</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">found</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">in</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">the</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">given</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">DLL</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>x);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">else</span><span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"The</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">given</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">element</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">is</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">found</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">at</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">position</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>x,<span class=\"cm-highlightSpace\"> </span>pos);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">break</span>;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">case</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">4</span>:<span class=\"cm-highlightSpace\"> </span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(first<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-gap\" style=\"height: 224px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f540afe58e11c319e335a/650ae807337d8e06cf0de0cf",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include<stdio.h>\n#include<stdlib.h>\n\nstruct node {\nint data;\nstruct node *next;\n};\ntypedef struct node *NODE;\n\nNODE createNodeInCLL() {\nNODE temp = (NODE)malloc(sizeof(struct node));\ntemp -> next = NULL;\n}\n\nNODE insertAtPositionInCLL( ) {\n\n}\n\nNODE deleteAtPositionInCLL( ) {\n\n\n}\n\nvoid traverseListInCLL( ) {\ndo()\n}\n\nvoid main() {\nNODE first = NULL;\nint x, pos, op;\nwhile(1) {\nprintf(\"1.Insert 2.Delete 3.Display 4.Exit\\n\");\nprintf(\"choice: \");\nscanf(\"%d\", &op);\nswitch(op) {\ncase 1: printf(\"Position: \");",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037c5\">#include</span><span class=\"\u037cf\">&lt;stdlib.h&gt;</span></span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*next;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">};</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"\u037ci\">NODE</span>;</span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNodeInCLL</span>()<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037ci\">NODE</span>)malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">node</span>));</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">insertAtPositionInCLL</span>(<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><br></div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">deleteAtPositionInCLL</span>(<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><br></div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">traverseListInCLL</span>(<span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"\u037cb\">do</span>()</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">main</span>()<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">NODE</span><span class=\"cm-highlightSpace\"> </span>first<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>x,<span class=\"cm-highlightSpace\"> </span>pos,<span class=\"cm-highlightSpace\"> </span>op;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(<span class=\"\u037cd\">1</span>)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"1.Insert</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">2.Delete</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">3.Display</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">4.Exit</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"choice:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>scanf(<span class=\"\u037ce\">\"%d\"</span>,<span class=\"cm-highlightSpace\"> </span>&amp;op);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">switch</span>(op)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">case</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cd\">1</span>:<span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"Position:</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-gap\" style=\"height: 716.8px;\"></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f540afe58e11c319e335a/5b4606a618b23e7e139a8ea0",
        "question_type": "549b4cf30e08f22e46dbf9cf",
        "answer": [
            true,
            false
        ]
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f540afe58e11c319e335a/5b4609be18b23e7e139a8f7f",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct polynomial {\nint coeff;\nint exp;\nstruct polynomial *next;\n};\ntypedef struct polynomial *poly;\n\npoly addTerm(poly head, poly temp) {\n\n}\n\nvoid print(poly head) {\ni\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">polynomial</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>coeff;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>exp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">polynomial</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">polynomial</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"\u037ci\">poly</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">addTerm</span>(<span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span>head,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span>temp)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><br></div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">print</span>(<span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span>head)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\">i</div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f540afe58e11c319e335a/5b46122118b23e7e139c0ffe",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct polynomial {\nint coeff;\nint exp;\nstruct polynomial *next;\n};\ntypedef struct polynomial *poly;\n\npoly addTerm(poly head, poly temp) {\n//write code here\n}\n\nvoid print(poly head) {\npoly temp = head;\nwhile(temp != NULL) {\nprintf(\"%d X^ %d ---> \", temp -> coeff, temp -> exp);\ntemp = temp -> next;\n}\nprintf(\"NULL\\n\");\n}\n\npoly add(poly head1, poly head2) {\n//write code here\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">polynomial</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>coeff;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>exp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">polynomial</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">polynomial</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"\u037ci\">poly</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">addTerm</span>(<span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span>head,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span>temp)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">here</span></div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">print</span>(<span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span>head)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>head;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(temp<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">X^</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">---&gt;</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>coeff,<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>exp);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"NULL</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">add</span>(<span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span>head1,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span>head2)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">here</span></div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f540afe58e11c319e335a/5b4619e918b23e7e13348e90",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct polynomial {\nint coeff;\nint exp;\nstruct polynomial *next;\n};\ntypedef struct polynomial *poly;\n\npoly addTerm(poly head, poly temp) {\n}\n\nvoid print(poly head) {\npoly temp = head;\nwhile(temp != NULL) {\nprintf(\"%d X^ %d ---> \", temp -> coeff, temp -> exp);\ntemp = temp -> next;\n}\nprintf(\"NULL\\n\");\n}\n\npoly sub(poly head1, poly head2) {\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">polynomial</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>coeff;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>exp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">polynomial</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">polynomial</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"\u037ci\">poly</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">addTerm</span>(<span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span>head,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span>temp)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">print</span>(<span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span>head)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>head;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(temp<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">X^</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">---&gt;</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>coeff,<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>exp);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"NULL</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">sub</span>(<span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span>head1,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span>head2)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/678f540afe58e11c319e335a/5b4630ff64bac16d4017a63e",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "struct polynomial {\nint coeff;\nint exp;\nstruct polynomial *next;\n};\ntypedef struct polynomial *poly;\n\npoly addTerm(poly head, poly temp) {\n}\n\nvoid print(poly head) {\npoly temp = head;\nwhile(temp != NULL) {\nprintf(\"%d X^ %d ---> \", temp -> coeff, temp -> exp);\ntemp = temp -> next;\n}\nprintf(\"NULL\\n\");\n}\n\npoly mul(poly head1, poly head2) {\n}",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">polynomial</span><span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>coeff;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>exp;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">polynomial</span><span class=\"cm-highlightSpace\"> </span>*next;</div><div class=\"cm-line\">};</div><div class=\"cm-line\"><span class=\"\u037cb\">typedef</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">polynomial</span><span class=\"cm-highlightSpace\"> </span>*<span class=\"\u037ci\">poly</span>;</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">addTerm</span>(<span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span>head,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span>temp)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">print</span>(<span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span>head)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>head;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cb\">while</span>(temp<span class=\"cm-highlightSpace\"> </span>!=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">X^</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">%d</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">---&gt;</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">\"</span>,<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>coeff,<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>exp);</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"cm-highlightTab\">\t</span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>-&gt;<span class=\"cm-highlightSpace\"> </span>next;</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>}</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span>printf(<span class=\"\u037ce\">\"NULL</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">mul</span>(<span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span>head1,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">poly</span><span class=\"cm-highlightSpace\"> </span>head2)<span class=\"cm-highlightSpace\"> </span>{</div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\">}</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/6799ee08ff8c0a15997e378b/6790bc50d94dcc1637ebe624",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "Type Content here...",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037ci\">Type</span><span class=\"cm-highlightSpace\"> </span>Content<span class=\"cm-highlightSpace\"> </span>here...</div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/6799ee08ff8c0a15997e378b/6790bfacd94dcc1637ebf621",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "// Type Content here...",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Type</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Content</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">here...</span></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/6799ee08ff8c0a15997e378b/6790c90ed94dcc1637ec195a",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "// Type Content here...",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Type</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Content</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">here...</span></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/6799ee08ff8c0a15997e378b/6790d4d5d94dcc1637ec3dee",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "// Type Content here...",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Type</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Content</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">here...</span></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/6799ee08ff8c0a15997e378b/6790dbeb567bfd0acb227cf9",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "// Type Content here...",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Type</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Content</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">here...</span></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/6799ee08ff8c0a15997e378b/6790e0d2567bfd0acb22827e",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "// Type Content here...",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Type</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Content</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">here...</span></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/6799ee12ff8c0a15997e37a0/63c7814de8d51e06b8036ab5",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><br></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/6799ee12ff8c0a15997e37a0/63d4e69d4c0e960772dc6bf0",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><br></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/6799ee12ff8c0a15997e37a0/63d4e6ab4c0e960772dc6c10",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><br></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/6799ee12ff8c0a15997e37a0/63d4edca4c0e960772dc7e06",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><br></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/6799ee12ff8c0a15997e37a0/639ab692dcf5d00787f78081",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><br></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/6799ee12ff8c0a15997e37a0/63d4edd74c0e960772dc7e13",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><br></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/6799ee12ff8c0a15997e37a0/63d50c3b4c0e960772dcca73",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><br></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/6799ee12ff8c0a15997e37a0/643f9bdc69652407733d6d25",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><br></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/6799ee12ff8c0a15997e37a0/643f9c0469652407733d6d7c",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><br></div>"
    },
    {
        "url": "https://kiet.codetantra.com/secure/course.jsp?eucId=678f46a5fe58e11c319e1efa#/contents/678f4774fe58e11c319e1f9e/6799ee12ff8c0a15997e37a0/66f28806c16fb411e53860a8",
        "question_type": "54883bea2036d78c5efedc3a",
        "answer": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\nint data;\nstruct Node* next;\n};\n\nstruct Node* createNode(int data) {\nstruct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\nnewNode->data = data;\nnewNode->next = NULL;\nreturn newNode;\n}\n\nvoid insertAtEnd(struct Node** head, int data) {\n// Write your code here...\n}\n\nint searchNode(struct Node* head, int data) {\n// Write your code here...\n}\n\nvoid printList(struct Node* head) {\nif (head == NULL) {\nprintf(\"List is empty\\n\");\nreturn;\n}\nstruct Node* temp = head;",
        "answer_html": "<div class=\"cm-activeLine cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037c5\">#include</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cf\">&lt;stdio.h&gt;</span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037c5\">#include</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cf\">&lt;stdlib.h&gt;</span></span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">Node</span><span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">Node</span>*<span class=\"cm-highlightSpace\"> </span>next;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">};</span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">Node</span>*<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">createNode</span>(<span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">Node</span>*<span class=\"cm-highlightSpace\"> </span>newNode<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">Node</span>*)malloc(<span class=\"\u037cb\">sizeof</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">Node</span>));</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>newNode-&gt;data<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>data;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>newNode-&gt;next<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span><span class=\"cm-highlightSpace\"> </span>newNode;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">}</span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">insertAtEnd</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">Node</span>**<span class=\"cm-highlightSpace\"> </span>head,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">your</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">here...</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\">}</span></div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">searchNode</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">Node</span>*<span class=\"cm-highlightSpace\"> </span>head,<span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">int</span><span class=\"cm-highlightSpace\"> </span>data)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span><span class=\"\u037cm\">//</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">Write</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">your</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">code</span><span class=\"cm-highlightSpace\"><span class=\"\u037cm\"> </span></span><span class=\"\u037cm\">here...</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\"><span class=\"cm-highlightTab\">\t</span></div><div class=\"cm-line\">}</div><div class=\"cm-line\"><br></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"\u037ci\">void</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cg\">printList</span>(<span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">Node</span>*<span class=\"cm-highlightSpace\"> </span>head)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">if</span><span class=\"cm-highlightSpace\"> </span>(head<span class=\"cm-highlightSpace\"> </span>==<span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">NULL</span>)<span class=\"cm-highlightSpace\"> </span>{</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>printf(<span class=\"\u037ce\">\"List</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">is</span><span class=\"cm-highlightSpace\"><span class=\"\u037ce\"> </span></span><span class=\"\u037ce\">empty</span><span class=\"\u037cf\">\\n</span><span class=\"\u037ce\">\"</span>);</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">return</span>;</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span>}</span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span></span></div><div class=\"cm-line\"><span class=\"bg-error bg-opacity-40\"><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037cb\">struct</span><span class=\"cm-highlightSpace\"> </span><span class=\"\u037ci\">Node</span>*<span class=\"cm-highlightSpace\"> </span>temp<span class=\"cm-highlightSpace\"> </span>=<span class=\"cm-highlightSpace\"> </span>head;</span></div><div class=\"cm-gap\" style=\"height: 1612.8px;\"></div>"
    }
]